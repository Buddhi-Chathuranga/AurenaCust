-----------------------------------------------------------------------------
--
--  Logical unit: ProductHandling
--  Type:         Entity
--  Component:    TRNINV
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


--Storing resulting json metadata in database splitted by indivudual objects
-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   projection_ VARCHAR2(250) := 'ProductHandling';
   header_     Model_Design_SYS.Fnd_Model_Design_Rec;
   clob_       CLOB := to_clob(' ');
BEGIN
   header_ := Model_Design_SYS.Prepare_Design_Data_Load('projection', projection_, Model_Design_SYS.SERVER_METADATA,
      'Used to handle all Product related activities');
   Dbms_Lob.trim(clob_, 0);
   Dbms_Lob.Writeappend(clob_, 2448, '{"projection": {"Name": "ProductHandling","Metadata": {"Version": "[#[generate:version]#]","Description": "Used to handle all Product related activities","Category": ["Users"]},"Container": {"EntitySets": [{"Name": "Reference_TrnInventory","EntityType": "TrnInventory"},{"Name": "Reference_TrnBranch","EntityType": "TrnBranch"},{"Name": "TrnUnitSet","EntityType": "TrnUnit"},{"Name": "TrnProductSet","EntityType": "TrnProduct"},{"Name": "TrnBrandSet","EntityType": "TrnBrand"},{"Name": "TrnProductCategorySet","EntityType": "TrnProdCategory"},{"Name": "TrnProductCategoryBrandSet","EntityType": "TrnProdCategoryBrand"},{"Name": "TrnModelSet","EntityType": "TrnModel"},{"Name": "TrnInventoryProductSet","EntityType": "TrnInventoryProduct"}[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entityset_Metadata:{"Projection": "ProductHandling","Lu": ["TrnBrand","TrnProdCategoryBrand","TrnProduct","TrnModel","TrnInventoryProduct","TrnBranch","TrnUnit","TrnProdCategory","TrnInventory"]}]#]],"Singletons": [],"Actions": [{"Name": "MoveProduct","Parameters": [{"Name": "CompanyId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "SourceBranchId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "SourceInventoryId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "ProductId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "DestBranchId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "DestInventoryId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "QuantitytoMove","DataType": "Number","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"MethodCall": "Product_Handling_SVC.Do_Move_Product(:CompanyId, :SourceBranchId, :SourceInventoryId, :ProductId, :DestBranchId, :DestInventoryId, :QuantitytoMove, unbound## => '''')","ReturnType": "Product_Handling_SVC.Empty_Arr","Bind": [{"Kind": "Parameter","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "SourceBranchId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "SourceInventoryId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "DestBranchId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "DestInventoryId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "QuantitytoMove","ImplementationType": "NUMBER"}]}}}[#[json');
   Dbms_Lob.Writeappend(clob_, 2448, 'callback:Custom_Object_Proxy_Sys.Server_Action_Metadata:{"Projection":"ProductHandling"}]#]],"Functions": [{"Name": "GetCurrentQuantity","DataType": "Number","Collection": false,"Parameters": [{"Name": "ParaCompanyId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "ParaBranchId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "ParaInventoryId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "ParaProductId","DataType": "Number","Collection": false,"Nullable": true}],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.Rd_Get_Current_Quantity(:ParaCompanyId, :ParaBranchId, :ParaInventoryId, :ParaProductId, unbound## => ''''))","Bind": [{"Kind": "Parameter","Name": "ParaCompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "ParaBranchId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "ParaInventoryId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "ParaProductId","ImplementationType": "NUMBER"}]}}}]},"Enumerations": [[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Enumeration_Metadata:{"Projection": "ProductHandling","Lu": ["TrnBrand","TrnProdCategoryBrand","TrnProduct","TrnModel","TrnInventoryProduct","TrnBranch","TrnUnit","TrnProdCategory","TrnInventory"]}]#]],"Structures": [{"Name": "TrnUnitCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnUnit","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnProductCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnProduct","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnBrandCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnBrand","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnProdCategoryCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnProdCategory","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","E');
   Dbms_Lob.Writeappend(clob_, 2450, 'xecute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnProdCategoryBrandCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnProdCategoryBrand","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnModelCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnModel","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnInventoryProductCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnInventoryProduct","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "MoveProductDataStructure","PLSQLRecordName": "PRODUCT_HANDLING_SVC.MOVE_PRODUCT_DATA_STRUCTURE_REC","Attributes": [{"Name": "CompanyId","DataType": "Text","Collection": false,"Nullable": true,"AttrName": "COMPANY_ID","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}},{"Name": "ProductId","DataType": "Number","Collection": false,"Nullable": true,"AttrName": "PRODUCT_ID","Execute": {"SQL": {"ImplementationType": "NUMBER"}}},{"Name": "SourceBranchId","DataType": "Text","Collection": false,"Nullable": true,"AttrName": "SOURCE_BRANCH_ID","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}},{"Name": "SourceInventoryId","DataType": "Number","Collection": false,"Nullable": true,"AttrName": "SOURCE_INVENTORY_ID","Execute": {"SQL": {"ImplementationType": "NUMBER"}}},{"Name": "SourceQuantity","DataType": "Number","Collection": false,"Nullable": true,"AttrName": "SOURCE_QUANTITY","Execute": {"SQL": {"ImplementationType": "NUMBER"}}},{"Name": "DestBranchId","DataType": "Text","Collection": false,"Nullable": false,"AttrName": "DEST_BRANCH_ID","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}},{"Name": "DestInventoryId","DataType": "Number","Collection": false,"Nullable": false,"AttrName": "DEST_INVENTORY_ID","Execute": {"SQL": {"ImplementationType": "NUMBER"}}},{"Name": "QuantityAlreadyAvailable","DataType": "Number","Collection": false,"Nullable": true,"AttrName": "QUANTITY_ALREADY_AVAILABLE","Execute": {"SQL": {"Implementa');
   Dbms_Lob.Writeappend(clob_, 2438, 'tionType": "NUMBER"}}},{"Name": "QuantityToMove","DataType": "Number","Collection": false,"Nullable": false,"AttrName": "QUANTITY_TO_MOVE","Execute": {"SQL": {"ImplementationType": "NUMBER"}}}]},{"Name": "StreamInfoRec","PLSQLRecordName": "PRODUCT_HANDLING_SVC.STREAM_INFO_REC","Attributes": [{"Name": "FileName","DataType": "Text"},{"Name": "MimeType","DataType": "Text"}]},{"Name": "EntityDec","PLSQLRecordName": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Attributes": [{"Name": "ETag","DataType": "Text"},{"Name": "Info","DataType": "Text"},{"Name": "Attr","DataType": "Text"}]}[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Structure_Metadata:{"Projection": "ProductHandling","Lu": ["TrnBrand","TrnProdCategoryBrand","TrnProduct","TrnModel","TrnInventoryProduct","TrnBranch","TrnUnit","TrnProdCategory","TrnInventory"]}]#]],"Entities": [{"Name": "TrnUnit","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnUnit","View":"TRN_UNIT"}]#]"}},"Keys": ["Unit"],"KeysWhere": "(unit = :Unit)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnUnit''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''UNIT=''||unit||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "Unit","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "UNIT","Keygeneration": "User","Execute": {"SQL": {"Select": "unit","ImplementationType": "VARCHAR2","Alias": "unit"}}},{"Name": "Description","DataType": "Text","Collection": false,"Size": 1000,"Nullable": true,"Updatable": true,"AttrName": "DESCRIPTION","Keygeneration": "User","Execute": {"SQL": {"Select": "description","ImplementationType": "VARCHAR2","Alias": "descript');
   Dbms_Lob.Writeappend(clob_, 2436, 'ion"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnUnit","Type":"Entity","Name":"TrnUnit","View":"TRN_UNIT"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnUnit''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''UNIT=''||unit||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnUnit","Lu":"TrnUnit","View":"TRN_UNIT"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnUnit","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_unit## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnUnit","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnUnitCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_unit## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_unit## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :Unit, :Attr, :Action$, trn_unit## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","Imple');
   Dbms_Lob.Writeappend(clob_, 2433, 'mentationType": "VARCHAR2"},{"Kind": "Attribute","Name": "Unit","ImplementationType": "VARCHAR2"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :Unit, :Action$, trn_unit## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "Unit","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnUnit","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnUnitCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :Unit, :CopyValues, trn_unit## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "Unit","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnProduct","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnProduct","View":"TRN_PRODUCT"}]#]"}},"Keys": ["CompanyId","ProductId"],"KeysWhere": "(company_id = :CompanyId AND product_id = :ProductId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProduct''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''COMPANY_ID=''||company_id||''^''||''PRODUCT_ID=');
   Dbms_Lob.Writeappend(clob_, 2447, '''||product_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "CompanyId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "COMPANY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "company_id","ImplementationType": "VARCHAR2","Alias": "company_id"}}},{"Name": "ProductId","DataType": "Number","Collection": false,"Nullable": false,"Updatable": false,"AttrName": "PRODUCT_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "product_id","ImplementationType": "NUMBER","Alias": "product_id"}}},{"Name": "Description","DataType": "Text","Collection": false,"Size": 1000,"Nullable": true,"Updatable": true,"AttrName": "DESCRIPTION","Keygeneration": "User","Execute": {"SQL": {"Select": "description","ImplementationType": "VARCHAR2","Alias": "description"}}},{"Name": "Price","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "PRICE","Keygeneration": "User","Execute": {"SQL": {"Select": "price","ImplementationType": "NUMBER","Alias": "price"}}},{"Name": "Comments","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Updatable": true,"AttrName": "COMMENTS","Keygeneration": "User","Execute": {"SQL": {"Select": "comments","ImplementationType": "VARCHAR2","Alias": "comments"}}},{"Name": "Unit","DataType": "Text","Collection": false,"Size": 10,"Nullable": true,"Updatable": true,"AttrName": "UNIT","Keygeneration": "User","Execute": {"SQL": {"Select": "unit","ImplementationType": "VARCHAR2","Alias": "unit"}}},{"Name": "BrandId","DataType": "Text","Collection": false,"Size": 10,"Nullable": true,"Updatable": true,"AttrName": "BRAND_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "brand_id","ImplementationType": "VARCHAR2","Alias": "brand_id"}}},{"Name": "CategoryId","DataType": "Text","Collection": false,"Size": 10,"Nullable": true,"Updatable": true,"AttrName": "CATEGORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "category_id","ImplementationType": "VARCHAR2","Alias": "category_id"}}},{"Name": "ModelId","DataType": "Text","Collection": false,"Size": 100,"Nullable": true,"Updatable": true,"AttrNam');
   Dbms_Lob.Writeappend(clob_, 2434, 'e": "MODEL_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "model_id","ImplementationType": "VARCHAR2","Alias": "model_id"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnProduct","Type":"Entity","Name":"TrnProduct","View":"TRN_PRODUCT"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProduct''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''COMPANY_ID=''||company_id||''^''||''PRODUCT_ID=''||product_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnProduct","Lu":"TrnProduct","View":"TRN_PRODUCT"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnProduct","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_product## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProduct","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProductCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_product## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_product## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false');
   Dbms_Lob.Writeappend(clob_, 2444, ',"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :CompanyId, :ProductId, :Attr, :Action$, trn_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :CompanyId, :ProductId, :Action$, trn_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProduct","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProductCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :CompanyId, :ProductId, :CopyValues, trn_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnBrand","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnBrand","View":"TRN_BRAND"}]#]"}},"Keys": ["BrandId"],"KeysWhere": "(brand_id = :BrandId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL"');
   Dbms_Lob.Writeappend(clob_, 2432, ': {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnBrand''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "BrandId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "BRAND_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "brand_id","ImplementationType": "VARCHAR2","Alias": "brand_id"}}},{"Name": "Name","DataType": "Text","Collection": false,"Size": 1000,"Nullable": false,"Updatable": true,"AttrName": "NAME","Keygeneration": "User","Execute": {"SQL": {"Select": "name","ImplementationType": "VARCHAR2","Alias": "name"}}},{"Name": "Comments","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Updatable": true,"AttrName": "COMMENTS","Keygeneration": "User","Execute": {"SQL": {"Select": "comments","ImplementationType": "VARCHAR2","Alias": "comments"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnBrand","Type":"Entity","Name":"TrnBrand","View":"TRN_BRAND"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnBrand''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnBrand","Lu":"TrnBrand","View":"TRN_BRAND"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnBrand","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Ha');
   Dbms_Lob.Writeappend(clob_, 2440, 'ndling_SVC.CRUD_Default(:Attr, trn_brand## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnBrand","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnBrandCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_brand## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_brand## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :BrandId, :Attr, :Action$, trn_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :BrandId, :Action$, trn_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnBrand","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Struct');
   Dbms_Lob.Writeappend(clob_, 2436, 'ure","SubType": "TrnBrandCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :BrandId, :CopyValues, trn_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnProdCategory","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnProdCategory","View":"TRN_PROD_CATEGORY"}]#]"}},"Keys": ["CategoryId"],"KeysWhere": "(category_id = :CategoryId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProdCategory''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''CATEGORY_ID=''||category_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "CategoryId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "CATEGORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "category_id","ImplementationType": "VARCHAR2","Alias": "category_id"}}},{"Name": "Name","DataType": "Text","Collection": false,"Size": 1000,"Nullable": false,"Updatable": true,"AttrName": "NAME","Keygeneration": "User","Execute": {"SQL": {"Select": "name","ImplementationType": "VARCHAR2","Alias": "name"}}},{"Name": "Comments","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Updatable": true,"');
   Dbms_Lob.Writeappend(clob_, 2438, 'AttrName": "COMMENTS","Keygeneration": "User","Execute": {"SQL": {"Select": "comments","ImplementationType": "VARCHAR2","Alias": "comments"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnProdCategory","Type":"Entity","Name":"TrnProdCategory","View":"TRN_PROD_CATEGORY"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProdCategory''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''CATEGORY_ID=''||category_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnProdCategory","Lu":"TrnProdCategory","View":"TRN_PROD_CATEGORY"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnProdCategory","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_prod_category## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProdCategory","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProdCategoryCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_prod_category## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_prod_category## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure"');
   Dbms_Lob.Writeappend(clob_, 2438, ',"SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :CategoryId, :Attr, :Action$, trn_prod_category## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :CategoryId, :Action$, trn_prod_category## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProdCategory","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProdCategoryCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :CategoryId, :CopyValues, trn_prod_category## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnProdCategoryBrand","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnProdCategoryBrand","View":"TRN_PROD_CATEGORY_BRAND"}]#]"}},"Keys": ["BrandId","CategoryId"],"KeysWhere": "(brand_id = :BrandId AND category_id = :CategoryId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias');
   Dbms_Lob.Writeappend(clob_, 2430, '": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProdCategoryBrand''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''||''CATEGORY_ID=''||category_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "BrandId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "BRAND_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "brand_id","ImplementationType": "VARCHAR2","Alias": "brand_id"}}},{"Name": "CategoryId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "CATEGORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "category_id","ImplementationType": "VARCHAR2","Alias": "category_id"}}},{"Name": "Brand","DataType": "Text","Collection": false,"Nullable": true,"Updatable": true,"AttrName": "BRAND","Keygeneration": "User","Execute": {"SQL": {"Select": "Trn_Brand_API.Get_Name(brand_id)","ImplementationType": "VARCHAR2","Alias": "brand"}}},{"Name": "Category","DataType": "Text","Collection": false,"Nullable": true,"Updatable": true,"AttrName": "CATEGORY","Keygeneration": "User","Execute": {"SQL": {"Select": "Trn_Prod_Category_API.Get_Name(category_id)","ImplementationType": "VARCHAR2","Alias": "category"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnProdCategoryBrand","Type":"Entity","Name":"TrnProdCategoryBrand","View":"TRN_PROD_CATEGORY_BRAND"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProdCategoryBrand''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''||''CATEGORY_ID=''||category_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigati');
   Dbms_Lob.Writeappend(clob_, 2442, 'on": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnProdCategoryBrand","Lu":"TrnProdCategoryBrand","View":"TRN_PROD_CATEGORY_BRAND"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnProdCategoryBrand","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_prod_category_brand## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProdCategoryBrand","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProdCategoryBrandCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_prod_category_brand## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_prod_category_brand## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :BrandId, :CategoryId, :Attr, :Action$, trn_prod_category_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"');
   Dbms_Lob.Writeappend(clob_, 2426, 'Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :BrandId, :CategoryId, :Action$, trn_prod_category_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProdCategoryBrand","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProdCategoryBrandCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :BrandId, :CategoryId, :CopyValues, trn_prod_category_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnModel","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnModel","View":"TRN_MODEL"}]#]"}},"Keys": ["BrandId","CategoryId","ModelId"],"KeysWhere": "(brand_id = :BrandId AND category_id = :CategoryId AND model_id = :ModelId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnModel''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''||''CATEGORY_ID=''||category_id||''^''||''MODEL_ID=''||model_id||''^''","ImplementationType": "VARCHAR2","Alias');
   Dbms_Lob.Writeappend(clob_, 2434, '": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "BrandId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "BRAND_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "brand_id","ImplementationType": "VARCHAR2","Alias": "brand_id"}}},{"Name": "CategoryId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "CATEGORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "category_id","ImplementationType": "VARCHAR2","Alias": "category_id"}}},{"Name": "ModelId","DataType": "Text","Collection": false,"Size": 100,"Nullable": false,"Updatable": false,"AttrName": "MODEL_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "model_id","ImplementationType": "VARCHAR2","Alias": "model_id"}}},{"Name": "Description","DataType": "Text","Collection": false,"Size": 2000,"Nullable": false,"Updatable": true,"AttrName": "DESCRIPTION","Keygeneration": "User","Execute": {"SQL": {"Select": "description","ImplementationType": "VARCHAR2","Alias": "description"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnModel","Type":"Entity","Name":"TrnModel","View":"TRN_MODEL"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnModel''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''||''CATEGORY_ID=''||category_id||''^''||''MODEL_ID=''||model_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnModel","Lu":"TrnModel","View":"TRN_MODEL"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnModel","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_model## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","Impleme');
   Dbms_Lob.Writeappend(clob_, 2442, 'ntationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnModel","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnModelCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_model## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_model## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :BrandId, :CategoryId, :ModelId, :Attr, :Action$, trn_model## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ModelId","ImplementationType": "VARCHAR2"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :BrandId, :CategoryId, :ModelId, :Action$, trn_model## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ModelId","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","Implement');
   Dbms_Lob.Writeappend(clob_, 2424, 'ationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnModel","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnModelCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :BrandId, :CategoryId, :ModelId, :CopyValues, trn_model## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ModelId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnInventoryProduct","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnInventoryProduct","View":"TRN_INVENTORY_PRODUCT"}]#]"}},"Keys": ["CompanyId","BranchId","InventoryId","ProductId"],"KeysWhere": "(company_id = :CompanyId AND branch_id = :BranchId AND inventory_id = :InventoryId AND product_id = :ProductId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnInventoryProduct''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''||''INVENTORY_ID=''||inventory_id||''^''||''PRODUCT_ID=''||product_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VAR');
   Dbms_Lob.Writeappend(clob_, 2439, 'CHAR2","Alias": "objgrants"}}},{"Name": "CompanyId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "COMPANY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "company_id","ImplementationType": "VARCHAR2","Alias": "company_id"}}},{"Name": "BranchId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "BRANCH_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "branch_id","ImplementationType": "VARCHAR2","Alias": "branch_id"}}},{"Name": "InventoryId","DataType": "Number","Collection": false,"Nullable": false,"Updatable": false,"AttrName": "INVENTORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "inventory_id","ImplementationType": "NUMBER","Alias": "inventory_id"}}},{"Name": "ProductId","DataType": "Number","Collection": false,"Nullable": false,"Updatable": false,"AttrName": "PRODUCT_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "product_id","ImplementationType": "NUMBER","Alias": "product_id"}}},{"Name": "Quantity","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "QUANTITY","Keygeneration": "User","Execute": {"SQL": {"Select": "quantity","ImplementationType": "NUMBER","Alias": "quantity"}}},{"Name": "ReorderLevel","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "REORDER_LEVEL","Keygeneration": "User","Execute": {"SQL": {"Select": "reorder_level","ImplementationType": "NUMBER","Alias": "reorder_level"}}},{"Name": "ReservedQuantity","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "RESERVED_QUANTITY","Keygeneration": "User","Execute": {"SQL": {"Select": "reserved_quantity","ImplementationType": "NUMBER","Alias": "reserved_quantity"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnInventoryProduct","Type":"Entity","Name":"TrnInventoryProduct","View":"TRN_INVENTORY_PRODUCT"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnInventoryProduct''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''||''INVENTORY_ID=');
   Dbms_Lob.Writeappend(clob_, 2435, '''||inventory_id||''^''||''PRODUCT_ID=''||product_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnInventoryProduct","Lu":"TrnInventoryProduct","View":"TRN_INVENTORY_PRODUCT"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnInventoryProduct","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_inventory_product## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnInventoryProduct","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnInventoryProductCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_inventory_product## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_inventory_product## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :CompanyId, :BranchId, :InventoryId, :ProductId, :Attr, :Action$, trn_inventory_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BranchId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "InventoryId","ImplementationType": "NUMBER"},{"Kind": "Attribute","Name": "ProductId","Implementa');
   Dbms_Lob.Writeappend(clob_, 2446, 'tionType": "NUMBER"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :CompanyId, :BranchId, :InventoryId, :ProductId, :Action$, trn_inventory_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BranchId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "InventoryId","ImplementationType": "NUMBER"},{"Kind": "Attribute","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnInventoryProduct","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnInventoryProductCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :CompanyId, :BranchId, :InventoryId, :ProductId, :CopyValues, trn_inventory_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BranchId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "InventoryId","ImplementationType": "NUMBER"},{"Kind": "Attribute","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnInventory","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnInventory","View":"TRN_INVENTORY"}]#]"}},"Keys": ["CompanyId","BranchId","InventoryId"],"KeysWhere": "(company_id = :CompanyId AND branch_id = :BranchId AND inventory_id = :InventoryId)","Attributes": [{"Na');
   Dbms_Lob.Writeappend(clob_, 2430, 'me": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnInventory''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''||''INVENTORY_ID=''||inventory_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "CompanyId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "COMPANY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "company_id","ImplementationType": "VARCHAR2","Alias": "company_id"}}},{"Name": "BranchId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "BRANCH_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "branch_id","ImplementationType": "VARCHAR2","Alias": "branch_id"}}},{"Name": "InventoryId","DataType": "Number","Collection": false,"Nullable": true,"Updatable": false,"AttrName": "INVENTORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "inventory_id","ImplementationType": "NUMBER","Alias": "inventory_id"}}},{"Name": "Name","DataType": "Text","Collection": false,"Size": 200,"Nullable": false,"Updatable": true,"AttrName": "NAME","Keygeneration": "User","Execute": {"SQL": {"Select": "name","ImplementationType": "VARCHAR2","Alias": "name"}}},{"Name": "PickingLeadTime","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "PICKING_LEAD_TIME","Keygeneration": "User","Execute": {"SQL": {"Select": "picking_lead_time","ImplementationType": "NUMBER","Alias": "picking_lead_time"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnInventory","Type":"Entity","Name":"TrnInventory","View":"TRN_INVENTORY"}]#]],"Computed": [],"Annotations": [{"Name": "lu');
   Dbms_Lob.Writeappend(clob_, 2420, 'name","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnInventory''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''||''INVENTORY_ID=''||inventory_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnInventory","Lu":"TrnInventory","View":"TRN_INVENTORY"}]#]],"CRUD": [],"Actions": [],"Functions": []},{"Name": "TrnBranch","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnBranch","View":"TRN_BRANCH"}]#]"}},"Keys": ["CompanyId","BranchId"],"KeysWhere": "(company_id = :CompanyId AND branch_id = :BranchId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnBranch''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "CompanyId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "COMPANY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "company_id","ImplementationType": "VARCHAR2","Alias": "company_id"}}},{"Name": "BranchId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "BRANCH_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "branch_id","ImplementationType": "VARCHAR2","Alias": "branch_id"}}},{"Name": "Name","');
   Dbms_Lob.Writeappend(clob_, 2060, 'DataType": "Text","Collection": false,"Size": 1000,"Nullable": false,"Updatable": true,"AttrName": "NAME","Keygeneration": "User","Execute": {"SQL": {"Select": "name","ImplementationType": "VARCHAR2","Alias": "name"}}},{"Name": "TimeOffset","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "TIME_OFFSET","Keygeneration": "User","Execute": {"SQL": {"Select": "time_offset","ImplementationType": "NUMBER","Alias": "time_offset"}}},{"Name": "CountryId","DataType": "Text","Collection": false,"Size": 10,"Nullable": true,"Updatable": true,"AttrName": "COUNTRY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "country_id","ImplementationType": "VARCHAR2","Alias": "country_id"}}},{"Name": "AreaId","DataType": "Text","Collection": false,"Size": 10,"Nullable": true,"Updatable": true,"AttrName": "AREA_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "area_id","ImplementationType": "VARCHAR2","Alias": "area_id"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnBranch","Type":"Entity","Name":"TrnBranch","View":"TRN_BRANCH"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnBranch''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnBranch","Lu":"TrnBranch","View":"TRN_BRANCH"}]#]],"CRUD": [],"Actions": [],"Functions": []}[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Type_Metadata:{"Projection": "ProductHandling","Lu": ["TrnBrand","TrnProdCategoryBrand","TrnProduct","TrnModel","TrnInventoryProduct","TrnBranch","TrnUnit","TrnProdCategory","TrnInventory"]}]#]]}}');
   Model_Design_SYS.Add_Model_Design_Template(header_, clob_);
   COMMIT;
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   projection_ VARCHAR2(250) := 'ProductHandling';
   header_     Model_Design_SYS.Fnd_Model_Design_Rec;
   json_       VARCHAR2(32767);
BEGIN
   header_ := Model_Design_SYS.Prepare_Design_Data_Load('projection', projection_, Model_Design_SYS.CLIENT_METADATA, '');
   json_ := '{"name": "ProductHandling","service": "ProductHandling.svc","version": "-915746320","contains": {"Reference_TrnInventory": {"name": "Reference_TrnInventory","entity": "TrnInventory","array": true,"defaultfilter": false},"Reference_TrnBranch": {"name": "Reference_TrnBranch","entity": "TrnBranch","array": true,"defaultfilter": false},"TrnUnitSet": {"name": "TrnUnitSet","entity": "TrnUnit","array": true,"defaultfilter": false},"TrnProductSet": {"name": "TrnProductSet","entity": "TrnProduct","array": true,"defaultfilter": false},"TrnBrandSet": {"name": "TrnBrandSet","entity": "TrnBrand","array": true,"defaultfilter": false},"TrnProductCategorySet": {"name": "TrnProductCategorySet","entity": "TrnProdCategory","array": true,"defaultfilter": false},"TrnProductCategoryBrandSet": {"name": "TrnProductCategoryBrandSet","entity": "TrnProdCategoryBrand","array": true,"defaultfilter": false},"TrnModelSet": {"name": "TrnModelSet","entity": "TrnModel","array": true,"defaultfilter": false},"TrnInventoryProductSet": {"name": "TrnInventoryProductSet","entity": "TrnInventoryProduct","array": true,"defaultfilter": false}[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entityset_Metadata:{"Projection": "ProductHandling","Lu": ["TrnBrand","TrnProdCategoryBrand","TrnProduct","TrnModel","TrnInventoryProduct","TrnBranch","TrnUnit","TrnProdCategory","TrnInventory"]}]#]},"enumerations": {[#[jsoncallback:Custom_Object_Proxy_SYS.Client_Enumeration_Metadata:{"Projection": "ProductHandling","Lu": ["TrnBrand","TrnProdCategoryBrand","TrnProduct","TrnModel","TrnInventoryProduct","TrnBranch","TrnUnit","TrnProdCategory","TrnInventory"]}]#]},"entities": {"TrnUnit": {"name": "TrnUnit","hasETag": true,"hasKeys": true,"CRUD": "Create,Read,Update,Delete","luname": "TrnUnit","ludependencies": ["TrnUnit"],"keys": ["Unit"],"attributes": {"Objgrants": {"datatype": "Text","size": 2000,"keygeneration": "Server","required": false,"editable": false,"updatable": false,"insertable": false,"unbound": false,"multiselect": false},"Unit": {"datatype": "Text","size": 10,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"Description": {"datatype": "Text","size": 1000,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}[#[jsoncallback:Custom_Object_Proxy_SYS.Client_Attri';
   json_ := json_ || 'bute_Metadata:{"Projection": "ProductHandling","Lu": "TrnUnit","View": "TRN_UNIT"}]#]},"references": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Nav_Metadata:{"Projection":"ProductHandling","Lu":"TrnUnit"}]#]},"arrays": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Array_Metadata:{"Projection":"ProductHandling","Entity":"TrnUnit","Lu":"TrnUnit"}]#]},"actions": {},"functions": {},"defaultcopyapplicable": true},"TrnProduct": {"name": "TrnProduct","hasETag": true,"hasKeys": true,"CRUD": "Create,Read,Update,Delete","luname": "TrnProduct","ludependencies": ["TrnProduct"],"keys": ["CompanyId","ProductId"],"attributes": {"Objgrants": {"datatype": "Text","size": 2000,"keygeneration": "Server","required": false,"editable": false,"updatable": false,"insertable": false,"unbound": false,"multiselect": false},"CompanyId": {"datatype": "Text","size": 20,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"ProductId": {"datatype": "Number","keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"Description": {"datatype": "Text","size": 1000,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"Price": {"datatype": "Number","keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"Comments": {"datatype": "Text","size": 2000,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"Unit": {"datatype": "Text","size": 10,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"BrandId": {"datatype": "Text","size": 10,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"CategoryId": {"datatype": "Text","size": 10,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"ModelId": {"datatype": "Text","size": 100,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound"';
   json_ := json_ || ': false,"multiselect": false}[#[jsoncallback:Custom_Object_Proxy_SYS.Client_Attribute_Metadata:{"Projection": "ProductHandling","Lu": "TrnProduct","View": "TRN_PRODUCT"}]#]},"references": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Nav_Metadata:{"Projection":"ProductHandling","Lu":"TrnProduct"}]#]},"arrays": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Array_Metadata:{"Projection":"ProductHandling","Entity":"TrnProduct","Lu":"TrnProduct"}]#]},"actions": {},"functions": {},"defaultcopyapplicable": true},"TrnBrand": {"name": "TrnBrand","hasETag": true,"hasKeys": true,"CRUD": "Create,Read,Update,Delete","luname": "TrnBrand","ludependencies": ["TrnBrand"],"keys": ["BrandId"],"attributes": {"Objgrants": {"datatype": "Text","size": 2000,"keygeneration": "Server","required": false,"editable": false,"updatable": false,"insertable": false,"unbound": false,"multiselect": false},"BrandId": {"datatype": "Text","size": 10,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"Name": {"datatype": "Text","size": 1000,"keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"Comments": {"datatype": "Text","size": 2000,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}[#[jsoncallback:Custom_Object_Proxy_SYS.Client_Attribute_Metadata:{"Projection": "ProductHandling","Lu": "TrnBrand","View": "TRN_BRAND"}]#]},"references": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Nav_Metadata:{"Projection":"ProductHandling","Lu":"TrnBrand"}]#]},"arrays": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Array_Metadata:{"Projection":"ProductHandling","Entity":"TrnBrand","Lu":"TrnBrand"}]#]},"actions": {},"functions": {},"defaultcopyapplicable": true},"TrnProdCategory": {"name": "TrnProdCategory","hasETag": true,"hasKeys": true,"CRUD": "Create,Read,Update,Delete","luname": "TrnProdCategory","ludependencies": ["TrnProdCategory"],"keys": ["CategoryId"],"attributes": {"Objgrants": {"datatype": "Text","size": 2000,"keygeneration": "Server","required": false,"editable": false,"updatable": false,"insertable": false,"unbound": false,"multiselect": false},"CategoryId": {"datatype": "Text","size": 10,"keygeneration": "User","required": true,"edi';
   json_ := json_ || 'table": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"Name": {"datatype": "Text","size": 1000,"keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"Comments": {"datatype": "Text","size": 2000,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}[#[jsoncallback:Custom_Object_Proxy_SYS.Client_Attribute_Metadata:{"Projection": "ProductHandling","Lu": "TrnProdCategory","View": "TRN_PROD_CATEGORY"}]#]},"references": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Nav_Metadata:{"Projection":"ProductHandling","Lu":"TrnProdCategory"}]#]},"arrays": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Array_Metadata:{"Projection":"ProductHandling","Entity":"TrnProdCategory","Lu":"TrnProdCategory"}]#]},"actions": {},"functions": {},"defaultcopyapplicable": true},"TrnProdCategoryBrand": {"name": "TrnProdCategoryBrand","hasETag": true,"hasKeys": true,"CRUD": "Create,Read,Update,Delete","luname": "TrnProdCategoryBrand","ludependencies": ["TrnProdCategoryBrand"],"keys": ["BrandId","CategoryId"],"attributes": {"Objgrants": {"datatype": "Text","size": 2000,"keygeneration": "Server","required": false,"editable": false,"updatable": false,"insertable": false,"unbound": false,"multiselect": false},"BrandId": {"datatype": "Text","size": 10,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"CategoryId": {"datatype": "Text","size": 10,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"Brand": {"datatype": "Text","keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"Category": {"datatype": "Text","keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}[#[jsoncallback:Custom_Object_Proxy_SYS.Client_Attribute_Metadata:{"Projection": "ProductHandling","Lu": "TrnProdCategoryBrand","View": "TRN_PROD_CATEGORY_BRAND"}]#]},"references": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Nav_Metadata:{"Projectio';
   json_ := json_ || 'n":"ProductHandling","Lu":"TrnProdCategoryBrand"}]#]},"arrays": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Array_Metadata:{"Projection":"ProductHandling","Entity":"TrnProdCategoryBrand","Lu":"TrnProdCategoryBrand"}]#]},"actions": {},"functions": {},"defaultcopyapplicable": true},"TrnModel": {"name": "TrnModel","hasETag": true,"hasKeys": true,"CRUD": "Create,Read,Update,Delete","luname": "TrnModel","ludependencies": ["TrnModel"],"keys": ["BrandId","CategoryId","ModelId"],"attributes": {"Objgrants": {"datatype": "Text","size": 2000,"keygeneration": "Server","required": false,"editable": false,"updatable": false,"insertable": false,"unbound": false,"multiselect": false},"BrandId": {"datatype": "Text","size": 10,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"CategoryId": {"datatype": "Text","size": 10,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"ModelId": {"datatype": "Text","size": 100,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"Description": {"datatype": "Text","size": 2000,"keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}[#[jsoncallback:Custom_Object_Proxy_SYS.Client_Attribute_Metadata:{"Projection": "ProductHandling","Lu": "TrnModel","View": "TRN_MODEL"}]#]},"references": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Nav_Metadata:{"Projection":"ProductHandling","Lu":"TrnModel"}]#]},"arrays": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Array_Metadata:{"Projection":"ProductHandling","Entity":"TrnModel","Lu":"TrnModel"}]#]},"actions": {},"functions": {},"defaultcopyapplicable": true},"TrnInventoryProduct": {"name": "TrnInventoryProduct","hasETag": true,"hasKeys": true,"CRUD": "Create,Read,Update,Delete","luname": "TrnInventoryProduct","ludependencies": ["TrnInventoryProduct"],"keys": ["CompanyId","BranchId","InventoryId","ProductId"],"attributes": {"Objgrants": {"datatype": "Text","size": 2000,"keygeneration": "Server","required": false,"editable": false,"updatable": false,"insertable": false,"unbound": false,"multiselect": false},"';
   json_ := json_ || 'CompanyId": {"datatype": "Text","size": 20,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"BranchId": {"datatype": "Text","size": 20,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"InventoryId": {"datatype": "Number","keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"ProductId": {"datatype": "Number","keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"Quantity": {"datatype": "Number","keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"ReorderLevel": {"datatype": "Number","keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"ReservedQuantity": {"datatype": "Number","keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}[#[jsoncallback:Custom_Object_Proxy_SYS.Client_Attribute_Metadata:{"Projection": "ProductHandling","Lu": "TrnInventoryProduct","View": "TRN_INVENTORY_PRODUCT"}]#]},"references": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Nav_Metadata:{"Projection":"ProductHandling","Lu":"TrnInventoryProduct"}]#]},"arrays": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Array_Metadata:{"Projection":"ProductHandling","Entity":"TrnInventoryProduct","Lu":"TrnInventoryProduct"}]#]},"actions": {},"functions": {},"defaultcopyapplicable": true},"TrnInventory": {"name": "TrnInventory","hasETag": true,"hasKeys": true,"CRUD": "Read","luname": "TrnInventory","ludependencies": ["TrnInventory"],"keys": ["CompanyId","BranchId","InventoryId"],"attributes": {"Objgrants": {"datatype": "Text","size": 2000,"keygeneration": "Server","required": false,"editable": false,"updatable": false,"insertable": false,"unbound": false,"multiselect": false},"CompanyId": {"datatype": "Text","size": 20,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertabl';
   json_ := json_ || 'e": true,"unbound": false,"multiselect": false},"BranchId": {"datatype": "Text","size": 20,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"InventoryId": {"datatype": "Number","keygeneration": "User","required": false,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"Name": {"datatype": "Text","size": 200,"keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"PickingLeadTime": {"datatype": "Number","keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}[#[jsoncallback:Custom_Object_Proxy_SYS.Client_Attribute_Metadata:{"Projection": "ProductHandling","Lu": "TrnInventory","View": "TRN_INVENTORY"}]#]},"references": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Nav_Metadata:{"Projection":"ProductHandling","Lu":"TrnInventory"}]#]},"arrays": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Array_Metadata:{"Projection":"ProductHandling","Entity":"TrnInventory","Lu":"TrnInventory"}]#]},"actions": {},"functions": {}},"TrnBranch": {"name": "TrnBranch","hasETag": true,"hasKeys": true,"CRUD": "Read","luname": "TrnBranch","ludependencies": ["TrnBranch"],"keys": ["CompanyId","BranchId"],"attributes": {"Objgrants": {"datatype": "Text","size": 2000,"keygeneration": "Server","required": false,"editable": false,"updatable": false,"insertable": false,"unbound": false,"multiselect": false},"CompanyId": {"datatype": "Text","size": 20,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"BranchId": {"datatype": "Text","size": 20,"keygeneration": "User","required": true,"editable": {"==": [{"var": "record.etag"},null]},"updatable": false,"insertable": true,"unbound": false,"multiselect": false},"Name": {"datatype": "Text","size": 1000,"keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"TimeOffset": {"datatype": "Number","keygeneration": "User","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"CountryId": {"datat';
   json_ := json_ || 'ype": "Text","size": 10,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"AreaId": {"datatype": "Text","size": 10,"keygeneration": "User","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}[#[jsoncallback:Custom_Object_Proxy_SYS.Client_Attribute_Metadata:{"Projection": "ProductHandling","Lu": "TrnBranch","View": "TRN_BRANCH"}]#]},"references": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Nav_Metadata:{"Projection":"ProductHandling","Lu":"TrnBranch"}]#]},"arrays": {[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Array_Metadata:{"Projection":"ProductHandling","Entity":"TrnBranch","Lu":"TrnBranch"}]#]},"actions": {},"functions": {}}[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Entity_Type_Metadata:{"Projection": "ProductHandling","Lu": ["TrnBrand","TrnProdCategoryBrand","TrnProduct","TrnModel","TrnInventoryProduct","TrnBranch","TrnUnit","TrnProdCategory","TrnInventory"]}]#]},"structures": {"TrnUnitCopyValues": {"name": "TrnUnitCopyValues","attributes": {"ModifiedSource": {"datatype": "Entity","subtype": "TrnUnit","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}},"references": {},"arrays": {}},"TrnProductCopyValues": {"name": "TrnProductCopyValues","attributes": {"ModifiedSource": {"datatype": "Entity","subtype": "TrnProduct","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}},"references": {},"arrays": {}},"TrnBrandCopyValues": {"name": "TrnBrandCopyValues","attributes": {"ModifiedSource": {"datatype": "Entity","subtype": "TrnBrand","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}},"references": {},"arrays": {}},"TrnProdCategoryCopyValues": {"name": "TrnProdCategoryCopyValues","attributes": {"ModifiedSource": {"datatype": "Entity","subtype": "TrnProdCategory","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}},"references": {},"arrays": {}},"TrnProdCategoryBrandCopyValues": {"name": "TrnProdCategoryBrandCopyValues","attributes": {"ModifiedSource": {"datatype": "Entity","subtype": "TrnProdCategoryBrand","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}}';
   json_ := json_ || ',"references": {},"arrays": {}},"TrnModelCopyValues": {"name": "TrnModelCopyValues","attributes": {"ModifiedSource": {"datatype": "Entity","subtype": "TrnModel","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}},"references": {},"arrays": {}},"TrnInventoryProductCopyValues": {"name": "TrnInventoryProductCopyValues","attributes": {"ModifiedSource": {"datatype": "Entity","subtype": "TrnInventoryProduct","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}},"references": {},"arrays": {}},"MoveProductDataStructure": {"name": "MoveProductDataStructure","attributes": {"CompanyId": {"datatype": "Text","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"ProductId": {"datatype": "Number","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"SourceBranchId": {"datatype": "Text","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"SourceInventoryId": {"datatype": "Number","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"SourceQuantity": {"datatype": "Number","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"DestBranchId": {"datatype": "Text","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"DestInventoryId": {"datatype": "Number","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"QuantityAlreadyAvailable": {"datatype": "Number","required": false,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false},"QuantityToMove": {"datatype": "Number","required": true,"editable": true,"updatable": true,"insertable": true,"unbound": false,"multiselect": false}},"references": {"TrnInventoryRef": {"target": "TrnInventory","datasource": "ProductHandling.svc/Reference_TrnInventory?$filter=CompanyId eq $[CompanyId] and BranchId eq $[DestBranchId] and InventoryId eq $[DestInventoryId]","mapping": {"CompanyId": "CompanyId","DestBranchId": "BranchId","DestInventoryId": "InventoryId"}},"TrnBranchtoInventoryRef": {"target": "TrnBranch","datasource": "ProductHandling.svc/Re';
   json_ := json_ || 'ference_TrnBranch?$filter=CompanyId eq $[CompanyId] and BranchId eq $[DestBranchId]","mapping": {"CompanyId": "CompanyId","DestBranchId": "BranchId"}}},"arrays": {}}},"actions": {"MoveProduct": {"name": "MoveProduct","ludependencies": ["TrnInventoryProduct"],"parameters": [{"Name": "CompanyId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "SourceBranchId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "SourceInventoryId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "ProductId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "DestBranchId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "DestInventoryId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "QuantitytoMove","DataType": "Number","Collection": false,"Nullable": true}]}[#[jsoncallback:Custom_Object_Proxy_Sys.Client_Action_Metadata:{"Projection": "ProductHandling"}]#]},"functions": {"GetCurrentQuantity": {"name": "GetCurrentQuantity","ludependencies": [],"parameters": [{"Name": "ParaCompanyId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "ParaBranchId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "ParaInventoryId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "ParaProductId","DataType": "Number","Collection": false,"Nullable": true}]}},"attachmentservices": {[#[callback:Object_Connection_Metadata_SYS.Enum_Entity_Services_:TrnBranch,TrnBrand,TrnInventory,TrnInventoryProduct,TrnModel,TrnProdCategory,TrnProdCategoryBrand,TrnProduct,TrnUnit]#]}}';
   Model_Design_SYS.Add_Model_Design_Template(header_, json_);
   COMMIT;
END;
-- [END IFS COMPLETE BLOCK]
/

-- [IFS COMPLETE BLOCK DECLAREEND]
DECLARE
   projection_ VARCHAR2(250) := 'ProductHandling';
   header_     Model_Design_SYS.Fnd_Model_Api_Doc_Rec;
   clob_       CLOB := to_clob(' ');
BEGIN
   header_ := Model_Design_SYS.Prepare_Doc_Load('projection', projection_, Model_Design_SYS.SERVER_METADATA, 'Used to handle all Product related activities');
   Dbms_Lob.trim(clob_, 0);
   Dbms_Lob.Writeappend(clob_, 2448, '{"projection": {"Name": "ProductHandling","Metadata": {"Version": "[#[generate:version]#]","Description": "Used to handle all Product related activities","Category": ["Users"]},"Container": {"EntitySets": [{"Name": "Reference_TrnInventory","EntityType": "TrnInventory"},{"Name": "Reference_TrnBranch","EntityType": "TrnBranch"},{"Name": "TrnUnitSet","EntityType": "TrnUnit"},{"Name": "TrnProductSet","EntityType": "TrnProduct"},{"Name": "TrnBrandSet","EntityType": "TrnBrand"},{"Name": "TrnProductCategorySet","EntityType": "TrnProdCategory"},{"Name": "TrnProductCategoryBrandSet","EntityType": "TrnProdCategoryBrand"},{"Name": "TrnModelSet","EntityType": "TrnModel"},{"Name": "TrnInventoryProductSet","EntityType": "TrnInventoryProduct"}],"Singletons": [],"Actions": [{"Name": "MoveProduct","Parameters": [{"Name": "CompanyId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "SourceBranchId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "SourceInventoryId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "ProductId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "DestBranchId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "DestInventoryId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "QuantitytoMove","DataType": "Number","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"MethodCall": "Product_Handling_SVC.Do_Move_Product(:CompanyId, :SourceBranchId, :SourceInventoryId, :ProductId, :DestBranchId, :DestInventoryId, :QuantitytoMove, unbound## => '''')","ReturnType": "Product_Handling_SVC.Empty_Art","Bind": [{"Kind": "Parameter","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "SourceBranchId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "SourceInventoryId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "DestBranchId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "DestInventoryId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "QuantitytoMove","ImplementationType": "NUMBER"}]}}}],"Functions": [{"Name": "GetCurrentQuantity","DataType": "Number","Collection": false,"Parameters": [{"Name": "ParaCompanyId","DataType": "Text","Collection": false,"Nullable": true},{"Name": "ParaBranchId","DataType": "Text","Collection": false,"Null');
   Dbms_Lob.Writeappend(clob_, 2448, 'able": true},{"Name": "ParaInventoryId","DataType": "Number","Collection": false,"Nullable": true},{"Name": "ParaProductId","DataType": "Number","Collection": false,"Nullable": true}],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.Rd_Get_Current_Quantity(:ParaCompanyId, :ParaBranchId, :ParaInventoryId, :ParaProductId, unbound## => ''''))","Bind": [{"Kind": "Parameter","Name": "ParaCompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "ParaBranchId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "ParaInventoryId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "ParaProductId","ImplementationType": "NUMBER"}]}}}]},"Enumerations": [],"Structures": [{"Name": "TrnUnitCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnUnit","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnProductCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnProduct","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnBrandCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnBrand","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnProdCategoryCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnProdCategory","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnProdCategoryBrandCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnProdCategoryBrand","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnModelCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnModel","Collection": false,"Nullable": true,"Att');
   Dbms_Lob.Writeappend(clob_, 2450, 'rName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "TrnInventoryProductCopyValues","PLSQLRecordName": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC","Attributes": [{"Name": "ModifiedSource","DataType": "Entity","SubType": "TrnInventoryProduct","Collection": false,"Nullable": true,"AttrName": "MODIFIED_SOURCE","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}}]},{"Name": "MoveProductDataStructure","PLSQLRecordName": "PRODUCT_HANDLING_SVC.MOVE_PRODUCT_DATA_STRUCTURE_REC","Attributes": [{"Name": "CompanyId","DataType": "Text","Collection": false,"Nullable": true,"AttrName": "COMPANY_ID","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}},{"Name": "ProductId","DataType": "Number","Collection": false,"Nullable": true,"AttrName": "PRODUCT_ID","Execute": {"SQL": {"ImplementationType": "NUMBER"}}},{"Name": "SourceBranchId","DataType": "Text","Collection": false,"Nullable": true,"AttrName": "SOURCE_BRANCH_ID","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}},{"Name": "SourceInventoryId","DataType": "Number","Collection": false,"Nullable": true,"AttrName": "SOURCE_INVENTORY_ID","Execute": {"SQL": {"ImplementationType": "NUMBER"}}},{"Name": "SourceQuantity","DataType": "Number","Collection": false,"Nullable": true,"AttrName": "SOURCE_QUANTITY","Execute": {"SQL": {"ImplementationType": "NUMBER"}}},{"Name": "DestBranchId","DataType": "Text","Collection": false,"Nullable": false,"AttrName": "DEST_BRANCH_ID","Execute": {"SQL": {"ImplementationType": "VARCHAR2"}}},{"Name": "DestInventoryId","DataType": "Number","Collection": false,"Nullable": false,"AttrName": "DEST_INVENTORY_ID","Execute": {"SQL": {"ImplementationType": "NUMBER"}}},{"Name": "QuantityAlreadyAvailable","DataType": "Number","Collection": false,"Nullable": true,"AttrName": "QUANTITY_ALREADY_AVAILABLE","Execute": {"SQL": {"ImplementationType": "NUMBER"}}},{"Name": "QuantityToMove","DataType": "Number","Collection": false,"Nullable": false,"AttrName": "QUANTITY_TO_MOVE","Execute": {"SQL": {"ImplementationType": "NUMBER"}}}]},{"Name": "StreamInfoRec","PLSQLRecordName": "PRODUCT_HANDLING_SVC.STREAM_INFO_REC","Attributes": [{"Name": "FileName","DataType": "Text"},{"Name": "MimeType","DataType": "Text"}]},{"Name": "EntityDec","PLSQLRecordName": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Attributes": [{"Name": "ETag","DataType": "Text"},{"Name": "Info","DataType": "Text"},{"Name": "Attr","DataType": "Text"}]}],"Entities": [{"');
   Dbms_Lob.Writeappend(clob_, 2432, 'Name": "TrnUnit","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnUnit","View":"TRN_UNIT"}]#]"}},"Keys": ["Unit"],"KeysWhere": "(unit = :Unit)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnUnit''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''UNIT=''||unit||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "Unit","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "UNIT","Keygeneration": "User","Execute": {"SQL": {"Select": "unit","ImplementationType": "VARCHAR2","Alias": "unit"}}},{"Name": "Description","DataType": "Text","Collection": false,"Size": 1000,"Nullable": true,"Updatable": true,"AttrName": "DESCRIPTION","Keygeneration": "User","Execute": {"SQL": {"Select": "description","ImplementationType": "VARCHAR2","Alias": "description"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnUnit","Type":"Entity","Name":"TrnUnit","View":"TRN_UNIT"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnUnit''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''UNIT=''||unit||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnUnit","Lu":"TrnUnit","View":"TRN_UNIT"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnUnit","Collec');
   Dbms_Lob.Writeappend(clob_, 2440, 'tion": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_unit## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnUnit","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnUnitCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_unit## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_unit## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :Unit, :Attr, :Action$, trn_unit## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "Unit","ImplementationType": "VARCHAR2"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :Unit, :Action$, trn_unit## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "Unit","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnUnit","Collection": false');
   Dbms_Lob.Writeappend(clob_, 2432, ',"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnUnitCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :Unit, :CopyValues, trn_unit## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "Unit","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnProduct","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnProduct","View":"TRN_PRODUCT"}]#]"}},"Keys": ["CompanyId","ProductId"],"KeysWhere": "(company_id = :CompanyId AND product_id = :ProductId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProduct''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''COMPANY_ID=''||company_id||''^''||''PRODUCT_ID=''||product_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "CompanyId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "COMPANY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "company_id","ImplementationType": "VARCHAR2","Alias": "company_id"}}},{"Name": "ProductId","DataType": "Number","Collection": false,"Nullable": false,"Updatable": false,"AttrName": "PRODUCT_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "product_id","ImplementationType": "NUMBER","Alia');
   Dbms_Lob.Writeappend(clob_, 2440, 's": "product_id"}}},{"Name": "Description","DataType": "Text","Collection": false,"Size": 1000,"Nullable": true,"Updatable": true,"AttrName": "DESCRIPTION","Keygeneration": "User","Execute": {"SQL": {"Select": "description","ImplementationType": "VARCHAR2","Alias": "description"}}},{"Name": "Price","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "PRICE","Keygeneration": "User","Execute": {"SQL": {"Select": "price","ImplementationType": "NUMBER","Alias": "price"}}},{"Name": "Comments","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Updatable": true,"AttrName": "COMMENTS","Keygeneration": "User","Execute": {"SQL": {"Select": "comments","ImplementationType": "VARCHAR2","Alias": "comments"}}},{"Name": "Unit","DataType": "Text","Collection": false,"Size": 10,"Nullable": true,"Updatable": true,"AttrName": "UNIT","Keygeneration": "User","Execute": {"SQL": {"Select": "unit","ImplementationType": "VARCHAR2","Alias": "unit"}}},{"Name": "BrandId","DataType": "Text","Collection": false,"Size": 10,"Nullable": true,"Updatable": true,"AttrName": "BRAND_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "brand_id","ImplementationType": "VARCHAR2","Alias": "brand_id"}}},{"Name": "CategoryId","DataType": "Text","Collection": false,"Size": 10,"Nullable": true,"Updatable": true,"AttrName": "CATEGORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "category_id","ImplementationType": "VARCHAR2","Alias": "category_id"}}},{"Name": "ModelId","DataType": "Text","Collection": false,"Size": 100,"Nullable": true,"Updatable": true,"AttrName": "MODEL_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "model_id","ImplementationType": "VARCHAR2","Alias": "model_id"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnProduct","Type":"Entity","Name":"TrnProduct","View":"TRN_PRODUCT"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProduct''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''COMPANY_ID=''||company_id||''^''||''PRODUCT_ID=''||product_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Serve');
   Dbms_Lob.Writeappend(clob_, 2440, 'r_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnProduct","Lu":"TrnProduct","View":"TRN_PRODUCT"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnProduct","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_product## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProduct","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProductCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_product## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_product## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :CompanyId, :ProductId, :Attr, :Action$, trn_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :CompanyId, :ProductId, :Action$, trn_product## => '''');","END;"');
   Dbms_Lob.Writeappend(clob_, 2436, '],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProduct","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProductCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :CompanyId, :ProductId, :CopyValues, trn_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnBrand","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnBrand","View":"TRN_BRAND"}]#]"}},"Keys": ["BrandId"],"KeysWhere": "(brand_id = :BrandId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnBrand''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "BrandId","DataType": "Text","Collection": false,"Size"');
   Dbms_Lob.Writeappend(clob_, 2440, ': 10,"Nullable": false,"Updatable": false,"AttrName": "BRAND_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "brand_id","ImplementationType": "VARCHAR2","Alias": "brand_id"}}},{"Name": "Name","DataType": "Text","Collection": false,"Size": 1000,"Nullable": false,"Updatable": true,"AttrName": "NAME","Keygeneration": "User","Execute": {"SQL": {"Select": "name","ImplementationType": "VARCHAR2","Alias": "name"}}},{"Name": "Comments","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Updatable": true,"AttrName": "COMMENTS","Keygeneration": "User","Execute": {"SQL": {"Select": "comments","ImplementationType": "VARCHAR2","Alias": "comments"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnBrand","Type":"Entity","Name":"TrnBrand","View":"TRN_BRAND"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnBrand''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnBrand","Lu":"TrnBrand","View":"TRN_BRAND"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnBrand","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_brand## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnBrand","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnBrandCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_brand## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","Dat');
   Dbms_Lob.Writeappend(clob_, 2442, 'aType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_brand## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :BrandId, :Attr, :Action$, trn_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :BrandId, :Action$, trn_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnBrand","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnBrandCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :BrandId, :CopyValues, trn_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnProdCategory","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnProdC');
   Dbms_Lob.Writeappend(clob_, 2432, 'ategory","View":"TRN_PROD_CATEGORY"}]#]"}},"Keys": ["CategoryId"],"KeysWhere": "(category_id = :CategoryId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProdCategory''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''CATEGORY_ID=''||category_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "CategoryId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "CATEGORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "category_id","ImplementationType": "VARCHAR2","Alias": "category_id"}}},{"Name": "Name","DataType": "Text","Collection": false,"Size": 1000,"Nullable": false,"Updatable": true,"AttrName": "NAME","Keygeneration": "User","Execute": {"SQL": {"Select": "name","ImplementationType": "VARCHAR2","Alias": "name"}}},{"Name": "Comments","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Updatable": true,"AttrName": "COMMENTS","Keygeneration": "User","Execute": {"SQL": {"Select": "comments","ImplementationType": "VARCHAR2","Alias": "comments"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnProdCategory","Type":"Entity","Name":"TrnProdCategory","View":"TRN_PROD_CATEGORY"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProdCategory''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''CATEGORY_ID=''||category_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Enti');
   Dbms_Lob.Writeappend(clob_, 2440, 'ty_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnProdCategory","Lu":"TrnProdCategory","View":"TRN_PROD_CATEGORY"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnProdCategory","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_prod_category## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProdCategory","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProdCategoryCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_prod_category## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_prod_category## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :CategoryId, :Attr, :Action$, trn_prod_category## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :CategoryId, :Action$, trn_prod_category## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETa');
   Dbms_Lob.Writeappend(clob_, 2432, 'g","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProdCategory","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProdCategoryCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :CategoryId, :CopyValues, trn_prod_category## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnProdCategoryBrand","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnProdCategoryBrand","View":"TRN_PROD_CATEGORY_BRAND"}]#]"}},"Keys": ["BrandId","CategoryId"],"KeysWhere": "(brand_id = :BrandId AND category_id = :CategoryId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProdCategoryBrand''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''||''CATEGORY_ID=''||category_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "BrandId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"Attr');
   Dbms_Lob.Writeappend(clob_, 2438, 'Name": "BRAND_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "brand_id","ImplementationType": "VARCHAR2","Alias": "brand_id"}}},{"Name": "CategoryId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "CATEGORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "category_id","ImplementationType": "VARCHAR2","Alias": "category_id"}}},{"Name": "Brand","DataType": "Text","Collection": false,"Nullable": true,"Updatable": true,"AttrName": "BRAND","Keygeneration": "User","Execute": {"SQL": {"Select": "Trn_Brand_API.Get_Name(brand_id)","ImplementationType": "VARCHAR2","Alias": "brand"}}},{"Name": "Category","DataType": "Text","Collection": false,"Nullable": true,"Updatable": true,"AttrName": "CATEGORY","Keygeneration": "User","Execute": {"SQL": {"Select": "Trn_Prod_Category_API.Get_Name(category_id)","ImplementationType": "VARCHAR2","Alias": "category"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnProdCategoryBrand","Type":"Entity","Name":"TrnProdCategoryBrand","View":"TRN_PROD_CATEGORY_BRAND"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnProdCategoryBrand''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''||''CATEGORY_ID=''||category_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnProdCategoryBrand","Lu":"TrnProdCategoryBrand","View":"TRN_PROD_CATEGORY_BRAND"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnProdCategoryBrand","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_prod_category_brand## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProdCategoryBrand","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProdCategoryBrandCopyValues","Collection": false,"Nullable": true}],"Execute":');
   Dbms_Lob.Writeappend(clob_, 2442, ' {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_prod_category_brand## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_prod_category_brand## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :BrandId, :CategoryId, :Attr, :Action$, trn_prod_category_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :BrandId, :CategoryId, :Action$, trn_prod_category_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnProdCategoryBrand","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnProdCategoryBrandCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling');
   Dbms_Lob.Writeappend(clob_, 2428, '_SVC.CRUD_Default_Copy(:ETag, :BrandId, :CategoryId, :CopyValues, trn_prod_category_brand## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnModel","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnModel","View":"TRN_MODEL"}]#]"}},"Keys": ["BrandId","CategoryId","ModelId"],"KeysWhere": "(brand_id = :BrandId AND category_id = :CategoryId AND model_id = :ModelId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnModel''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''||''CATEGORY_ID=''||category_id||''^''||''MODEL_ID=''||model_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "BrandId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "BRAND_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "brand_id","ImplementationType": "VARCHAR2","Alias": "brand_id"}}},{"Name": "CategoryId","DataType": "Text","Collection": false,"Size": 10,"Nullable": false,"Updatable": false,"AttrName": "CATEGORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "category_id","ImplementationType": "VARCHAR2","Alias": "category_id"}}},{"Name": "ModelId","DataType": "Tex');
   Dbms_Lob.Writeappend(clob_, 2432, 't","Collection": false,"Size": 100,"Nullable": false,"Updatable": false,"AttrName": "MODEL_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "model_id","ImplementationType": "VARCHAR2","Alias": "model_id"}}},{"Name": "Description","DataType": "Text","Collection": false,"Size": 2000,"Nullable": false,"Updatable": true,"AttrName": "DESCRIPTION","Keygeneration": "User","Execute": {"SQL": {"Select": "description","ImplementationType": "VARCHAR2","Alias": "description"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnModel","Type":"Entity","Name":"TrnModel","View":"TRN_MODEL"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnModel''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRAND_ID=''||brand_id||''^''||''CATEGORY_ID=''||category_id||''^''||''MODEL_ID=''||model_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnModel","Lu":"TrnModel","View":"TRN_MODEL"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnModel","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_model## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnModel","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnModelCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_model## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","  ');
   Dbms_Lob.Writeappend(clob_, 2442, ' :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_model## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :BrandId, :CategoryId, :ModelId, :Attr, :Action$, trn_model## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ModelId","ImplementationType": "VARCHAR2"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :BrandId, :CategoryId, :ModelId, :Action$, trn_model## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ModelId","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnModel","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnModelCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :BrandId, :CategoryId, :ModelId, :CopyValues, trn_model## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BrandId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CategoryId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "ModelId","ImplementationType": "VARCHAR2"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": ');
   Dbms_Lob.Writeappend(clob_, 2426, '"STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnInventoryProduct","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnInventoryProduct","View":"TRN_INVENTORY_PRODUCT"}]#]"}},"Keys": ["CompanyId","BranchId","InventoryId","ProductId"],"KeysWhere": "(company_id = :CompanyId AND branch_id = :BranchId AND inventory_id = :InventoryId AND product_id = :ProductId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnInventoryProduct''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''||''INVENTORY_ID=''||inventory_id||''^''||''PRODUCT_ID=''||product_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "CompanyId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "COMPANY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "company_id","ImplementationType": "VARCHAR2","Alias": "company_id"}}},{"Name": "BranchId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "BRANCH_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "branch_id","ImplementationType": "VARCHAR2","Alias": "branch_id"}}},{"Name": "InventoryId","DataType": "Number","Collection": false,"Nullable": false,"Updatable": false,"AttrName": "INVENTORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "inventory_id","ImplementationType": "NUMBER","Alias": "inventory_id"}}},{"Name": "ProductId","DataType": "Num');
   Dbms_Lob.Writeappend(clob_, 2430, 'ber","Collection": false,"Nullable": false,"Updatable": false,"AttrName": "PRODUCT_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "product_id","ImplementationType": "NUMBER","Alias": "product_id"}}},{"Name": "Quantity","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "QUANTITY","Keygeneration": "User","Execute": {"SQL": {"Select": "quantity","ImplementationType": "NUMBER","Alias": "quantity"}}},{"Name": "ReorderLevel","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "REORDER_LEVEL","Keygeneration": "User","Execute": {"SQL": {"Select": "reorder_level","ImplementationType": "NUMBER","Alias": "reorder_level"}}},{"Name": "ReservedQuantity","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "RESERVED_QUANTITY","Keygeneration": "User","Execute": {"SQL": {"Select": "reserved_quantity","ImplementationType": "NUMBER","Alias": "reserved_quantity"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnInventoryProduct","Type":"Entity","Name":"TrnInventoryProduct","View":"TRN_INVENTORY_PRODUCT"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnInventoryProduct''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''||''INVENTORY_ID=''||inventory_id||''^''||''PRODUCT_ID=''||product_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnInventoryProduct","Lu":"TrnInventoryProduct","View":"TRN_INVENTORY_PRODUCT"}]#]],"CRUD": [{"Name": "Default","DataType": "Entity","SubType": "TrnInventoryProduct","Collection": false,"CollectionBound": true,"Parameters": [],"Execute": {"SQL": {"From": "TABLE(Product_Handling_SVC.CRUD_Default(:Attr, trn_inventory_product## => ''''))","Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"}]}}},{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnInventoryProduct","Collection": false,"CollectionBound": true,"Parameters": [{"Name": "CopyValues",');
   Dbms_Lob.Writeappend(clob_, 2442, '"DataType": "Structure","SubType": "TrnInventoryProductCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:CopyValues, trn_inventory_product## => '''');","END;"],"Bind": [{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}},{"Name": "Create","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Create(:Attr, :Action$, trn_inventory_product## => '''');","END;"],"Bind": [{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Update","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Update(:ETag, :CompanyId, :BranchId, :InventoryId, :ProductId, :Attr, :Action$, trn_inventory_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BranchId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "InventoryId","ImplementationType": "NUMBER"},{"Kind": "Attribute","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "ClientSYS.AttributeString","Name": "Attr","ImplementationType": "VARCHAR2"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}},{"Name": "Delete","DataType": "Structure","SubType": "EntityDec","Collection": false,"Parameters": [],"Execute": {"PL-SQL": {"Code": ["BEGIN","   :Return_$ := Product_Handling_SVC.CRUD_Delete(:ETag, :CompanyId, :BranchId, :InventoryId, :ProductId, :Action$, trn_inventory_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BranchId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "InventoryId","ImplementationType": "NUMBER"},{"Kind": "Attribute","Name": "ProductId","Implementatio');
   Dbms_Lob.Writeappend(clob_, 2428, 'nType": "NUMBER"},{"Kind": "Action","Name": "Action$","ImplementationType": "VARCHAR2"}]}}}],"Actions": [],"Functions": [{"Name": "DefaultCopy","DataType": "Entity","SubType": "TrnInventoryProduct","Collection": false,"CrudOperation": true,"Parameters": [{"Name": "CopyValues","DataType": "Structure","SubType": "TrnInventoryProductCopyValues","Collection": false,"Nullable": true}],"Execute": {"PL-SQL": {"Code": ["BEGIN"," :Return_$ := Product_Handling_SVC.CRUD_Default_Copy(:ETag, :CompanyId, :BranchId, :InventoryId, :ProductId, :CopyValues, trn_inventory_product## => '''');","END;"],"Bind": [{"Kind": "ETag","Name": "ETag","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "CompanyId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "BranchId","ImplementationType": "VARCHAR2"},{"Kind": "Attribute","Name": "InventoryId","ImplementationType": "NUMBER"},{"Kind": "Attribute","Name": "ProductId","ImplementationType": "NUMBER"},{"Kind": "Parameter","Name": "CopyValues","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.COPY_VALUES_REC"},{"Kind": "EntityDec$","Name": "Return_$","ImplementationType": "STRUCTURE","SubType": "PRODUCT_HANDLING_SVC.ENTITY_DEC","Direction": "OUT"}]}}}]},{"Name": "TrnInventory","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"ProductHandling","Lu":"TrnInventory","View":"TRN_INVENTORY"}]#]"}},"Keys": ["CompanyId","BranchId","InventoryId"],"KeysWhere": "(company_id = :CompanyId AND branch_id = :BranchId AND inventory_id = :InventoryId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnInventory''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''||''INVENTORY_ID=''||inventory_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keyg');
   Dbms_Lob.Writeappend(clob_, 2436, 'eneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "CompanyId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "COMPANY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "company_id","ImplementationType": "VARCHAR2","Alias": "company_id"}}},{"Name": "BranchId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "BRANCH_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "branch_id","ImplementationType": "VARCHAR2","Alias": "branch_id"}}},{"Name": "InventoryId","DataType": "Number","Collection": false,"Nullable": true,"Updatable": false,"AttrName": "INVENTORY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "inventory_id","ImplementationType": "NUMBER","Alias": "inventory_id"}}},{"Name": "Name","DataType": "Text","Collection": false,"Size": 200,"Nullable": false,"Updatable": true,"AttrName": "NAME","Keygeneration": "User","Execute": {"SQL": {"Select": "name","ImplementationType": "VARCHAR2","Alias": "name"}}},{"Name": "PickingLeadTime","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "PICKING_LEAD_TIME","Keygeneration": "User","Execute": {"SQL": {"Select": "picking_lead_time","ImplementationType": "NUMBER","Alias": "picking_lead_time"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnInventory","Type":"Entity","Name":"TrnInventory","View":"TRN_INVENTORY"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnInventory''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''||''INVENTORY_ID=''||inventory_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnInventory","Lu":"TrnInventory","View":"TRN_INVENTORY"}]#]],"CRUD": [],"Actions": [],"Functions": []},{"Name": "TrnBranch","SupportWarnings": false,"Execute": {"SQL": {"From": "[#[callback:Custom_Object_Proxy_SYS.Server_View_Metadata:{"Projection":"P');
   Dbms_Lob.Writeappend(clob_, 2434, 'roductHandling","Lu":"TrnBranch","View":"TRN_BRANCH"}]#]"}},"Keys": ["CompanyId","BranchId"],"KeysWhere": "(company_id = :CompanyId AND branch_id = :BranchId)","Attributes": [{"Name": "ETag","DataType": "ETag","Collection": false,"Size": 128,"Nullable": true,"Execute": {"SQL": {"Select": "''W/\"''||objid||'':''||objversion||''\"''","ImplementationType": "VARCHAR2","Alias": "etag"}}},{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnBranch''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}},{"Name": "Objgrants","DataType": "Text","Collection": false,"Size": 2000,"Nullable": true,"Insertable": false,"Updatable": false,"AttrName": "OBJGRANTS","Keygeneration": "Server","Execute": {"SQL": {"Select": "NULL","ImplementationType": "VARCHAR2","Alias": "objgrants"}}},{"Name": "CompanyId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "COMPANY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "company_id","ImplementationType": "VARCHAR2","Alias": "company_id"}}},{"Name": "BranchId","DataType": "Text","Collection": false,"Size": 20,"Nullable": false,"Updatable": false,"AttrName": "BRANCH_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "branch_id","ImplementationType": "VARCHAR2","Alias": "branch_id"}}},{"Name": "Name","DataType": "Text","Collection": false,"Size": 1000,"Nullable": false,"Updatable": true,"AttrName": "NAME","Keygeneration": "User","Execute": {"SQL": {"Select": "name","ImplementationType": "VARCHAR2","Alias": "name"}}},{"Name": "TimeOffset","DataType": "Number","Collection": false,"Nullable": false,"Updatable": true,"AttrName": "TIME_OFFSET","Keygeneration": "User","Execute": {"SQL": {"Select": "time_offset","ImplementationType": "NUMBER","Alias": "time_offset"}}},{"Name": "CountryId","DataType": "Text","Collection": false,"Size": 10,"Nullable": true,"Updatable": true,"AttrName": "COUNTRY_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "country_id","ImplementationType": "VARCHAR2","Alias": "country_id"}}},{"Name": "AreaId","DataType": "Text","Collection": false,"Size": 10,"Nullable": true,"Updatable": true,"AttrNa');
   Dbms_Lob.Writeappend(clob_, 978, 'me": "AREA_ID","Keygeneration": "User","Execute": {"SQL": {"Select": "area_id","ImplementationType": "VARCHAR2","Alias": "area_id"}}}[#[jsoncallback:Custom_Object_Proxy_SYS.Server_Attribute_Metadata:{"Projection":"ProductHandling","Lu":"TrnBranch","Type":"Entity","Name":"TrnBranch","View":"TRN_BRANCH"}]#]],"Computed": [],"Annotations": [{"Name": "luname","DataType": "Text","Collection": false,"Size": 80,"Nullable": true,"Execute": {"SQL": {"Select": "''TrnBranch''","ImplementationType": "VARCHAR2","Alias": "luname"}}},{"Name": "keyref","DataType": "Text","Collection": false,"Size": 4000,"Nullable": true,"Execute": {"SQL": {"Select": "''BRANCH_ID=''||branch_id||''^''||''COMPANY_ID=''||company_id||''^''","ImplementationType": "VARCHAR2","Alias": "keyref"}}}],"Navigation": [[#[jsoncallback:Custom_Object_Proxy_Sys.Server_Entity_Nav_Metadata:{"Projection":"ProductHandling","Entity":"TrnBranch","Lu":"TrnBranch","View":"TRN_BRANCH"}]#]],"CRUD": [],"Actions": [],"Functions": []}]}}');
   Model_Design_SYS.Add_Model_Api_Doc_Template(header_, clob_);
   COMMIT;
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating Product_Handling_SVC specification

-- [IFS COMPLETE BLOCK PACKAGE Product_Handling_SVC]
CREATE OR REPLACE PACKAGE Product_Handling_SVC IS

module_  CONSTANT VARCHAR2(25)  := 'TRNINV';
lu_name_ CONSTANT VARCHAR2(250) := 'ProductHandling';
lu_type_ CONSTANT VARCHAR2(25)  := 'Projection';

-----------------------------------------------------------------------------
---------------------------- PUBLIC DECLARATIONS ----------------------------
-----------------------------------------------------------------------------

TYPE Entity_Dec IS RECORD (
   etag                           VARCHAR2(100),
   info                           VARCHAR2(4000),
   attr                           VARCHAR2(32000));

TYPE Entity_Small_Dec IS RECORD (
   etag                           VARCHAR2(100),
   info                           VARCHAR2(4000),
   attr                           VARCHAR2(4000));

TYPE Entity_Small_Drr      IS TABLE OF Entity_Small_Dec;

TYPE Entity_Drr      IS TABLE OF Entity_Dec;

TYPE Objid_Arr       IS TABLE OF VARCHAR2(100);

TYPE Empty_Art       IS TABLE OF VARCHAR2(1);

TYPE Boolean_Arr     IS TABLE OF BOOLEAN;

TYPE Boolean_Art     IS TABLE OF VARCHAR2(5);

TYPE Number_Arr      IS TABLE OF NUMBER;

TYPE Text_Arr        IS TABLE OF VARCHAR2(4000);

TYPE Stream_Data_Rec IS RECORD (
   file_name                           VARCHAR2(100),
   mime_type                           VARCHAR2(100),
   stream_data                         BLOB);

TYPE Stream_Data_Arr IS TABLE OF Stream_Data_Rec;

TYPE Stream_Info_Rec IS RECORD (
   file_name                           VARCHAR2(100),
   mime_type                           VARCHAR2(100));

TYPE Stream_Text_Data_Rec IS RECORD (
   file_name                           VARCHAR2(100),
   mime_type                           VARCHAR2(100),
   stream_data                         CLOB);

TYPE Move_Product_Data_Structure_Rec IS RECORD (
   company_id                     VARCHAR2(4000),
   product_id                     NUMBER,
   source_branch_id               VARCHAR2(4000),
   source_inventory_id            NUMBER,
   source_quantity                NUMBER,
   dest_branch_id                 VARCHAR2(4000),
   dest_inventory_id              NUMBER,
   quantity_already_available     NUMBER,
   quantity_to_move               NUMBER);

TYPE Move_Product_Data_Structure_Arr IS TABLE OF Move_Product_Data_Structure_Rec;

TYPE Copy_Values_Rec IS RECORD (
   modified_source                VARCHAR2(32000));


-----------------------------------------------------------------------------
------------------------- METADATA PROVIDER METHODS -------------------------
-----------------------------------------------------------------------------

FUNCTION Verify_Metadata_Sql_Content_ (
   metadata_version_ IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Verify_Metadata_Plsql_Content_ (
   metadata_version_ IN VARCHAR2 );

FUNCTION Get_Metadata_Content_ (
   context_ IN VARCHAR2 DEFAULT NULL ) RETURN CLOB;

FUNCTION Get_Metadata_Version_ (
   context_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2;

FUNCTION Get_Metadata_Category_ (
   context_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2;

FUNCTION Get_Metadata_Service_Group_ (
   context_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2;
    
-----------------------------------------------------------------------------
------------------------------- GLOBAL METHODS ------------------------------
-----------------------------------------------------------------------------
--@PoReadOnly(Do_Move_Product)
PROCEDURE Do_Move_Product(company_id_ IN VARCHAR2, source_branch_id_ IN VARCHAR2, source_inventory_id_ IN NUMBER, product_id_ IN NUMBER, dest_branch_id_ IN VARCHAR2, dest_inventory_id_ IN NUMBER, quantityto_move_ IN NUMBER, unbound## IN VARCHAR2);

--@PoReadOnly(Rd_Get_Current_Quantity)
FUNCTION Rd_Get_Current_Quantity(para_company_id_ IN VARCHAR2, para_branch_id_ IN VARCHAR2, para_inventory_id_ IN NUMBER, para_product_id_ IN NUMBER, unbound## IN VARCHAR2) RETURN Number_Arr PIPELINED;

-----------------------------------------------------------------------------
---------------------------- METHODS FOR TRN UNIT ---------------------------
-----------------------------------------------------------------------------


--@PoReadOnly(CRUD_Default)
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_unit## IN VARCHAR2) RETURN Entity_Small_Drr PIPELINED;

--@PoReadOnly(CRUD_Default_Copy)
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_unit## IN VARCHAR2) RETURN Entity_Dec;

FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, unit_ IN VARCHAR2, values_ IN Copy_Values_Rec, trn_unit## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Create)
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_unit## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Update)
FUNCTION CRUD_Update(etag_ IN VARCHAR2, unit_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_unit## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Delete)
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, unit_ IN VARCHAR2, action$_ IN VARCHAR2, trn_unit## IN VARCHAR2) RETURN Entity_Dec;

-----------------------------------------------------------------------------
-------------------------- METHODS FOR TRN PRODUCT --------------------------
-----------------------------------------------------------------------------


--@PoReadOnly(CRUD_Default)
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_product## IN VARCHAR2) RETURN Entity_Small_Drr PIPELINED;

--@PoReadOnly(CRUD_Default_Copy)
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_product## IN VARCHAR2) RETURN Entity_Dec;

FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, product_id_ IN NUMBER, values_ IN Copy_Values_Rec, trn_product## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Create)
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_product## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Update)
FUNCTION CRUD_Update(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, product_id_ IN NUMBER, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_product## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Delete)
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, product_id_ IN NUMBER, action$_ IN VARCHAR2, trn_product## IN VARCHAR2) RETURN Entity_Dec;

-----------------------------------------------------------------------------
--------------------------- METHODS FOR TRN BRAND ---------------------------
-----------------------------------------------------------------------------


--@PoReadOnly(CRUD_Default)
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_brand## IN VARCHAR2) RETURN Entity_Small_Drr PIPELINED;

--@PoReadOnly(CRUD_Default_Copy)
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_brand## IN VARCHAR2) RETURN Entity_Dec;

FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, values_ IN Copy_Values_Rec, trn_brand## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Create)
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_brand## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Update)
FUNCTION CRUD_Update(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_brand## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Delete)
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, action$_ IN VARCHAR2, trn_brand## IN VARCHAR2) RETURN Entity_Dec;

-----------------------------------------------------------------------------
----------------------- METHODS FOR TRN PROD CATEGORY -----------------------
-----------------------------------------------------------------------------


--@PoReadOnly(CRUD_Default)
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_prod_category## IN VARCHAR2) RETURN Entity_Small_Drr PIPELINED;

--@PoReadOnly(CRUD_Default_Copy)
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_prod_category## IN VARCHAR2) RETURN Entity_Dec;

FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, category_id_ IN VARCHAR2, values_ IN Copy_Values_Rec, trn_prod_category## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Create)
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_prod_category## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Update)
FUNCTION CRUD_Update(etag_ IN VARCHAR2, category_id_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_prod_category## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Delete)
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, category_id_ IN VARCHAR2, action$_ IN VARCHAR2, trn_prod_category## IN VARCHAR2) RETURN Entity_Dec;

-----------------------------------------------------------------------------
-------------------- METHODS FOR TRN PROD CATEGORY BRAND --------------------
-----------------------------------------------------------------------------


--@PoReadOnly(CRUD_Default)
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_prod_category_brand## IN VARCHAR2) RETURN Entity_Small_Drr PIPELINED;

--@PoReadOnly(CRUD_Default_Copy)
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_prod_category_brand## IN VARCHAR2) RETURN Entity_Dec;

FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, values_ IN Copy_Values_Rec, trn_prod_category_brand## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Create)
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_prod_category_brand## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Update)
FUNCTION CRUD_Update(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_prod_category_brand## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Delete)
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, action$_ IN VARCHAR2, trn_prod_category_brand## IN VARCHAR2) RETURN Entity_Dec;

-----------------------------------------------------------------------------
--------------------------- METHODS FOR TRN MODEL ---------------------------
-----------------------------------------------------------------------------


--@PoReadOnly(CRUD_Default)
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_model## IN VARCHAR2) RETURN Entity_Small_Drr PIPELINED;

--@PoReadOnly(CRUD_Default_Copy)
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_model## IN VARCHAR2) RETURN Entity_Dec;

FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, model_id_ IN VARCHAR2, values_ IN Copy_Values_Rec, trn_model## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Create)
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_model## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Update)
FUNCTION CRUD_Update(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, model_id_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_model## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Delete)
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, model_id_ IN VARCHAR2, action$_ IN VARCHAR2, trn_model## IN VARCHAR2) RETURN Entity_Dec;

-----------------------------------------------------------------------------
--------------------- METHODS FOR TRN INVENTORY PRODUCT ---------------------
-----------------------------------------------------------------------------


--@PoReadOnly(CRUD_Default)
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_inventory_product## IN VARCHAR2) RETURN Entity_Small_Drr PIPELINED;

--@PoReadOnly(CRUD_Default_Copy)
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_inventory_product## IN VARCHAR2) RETURN Entity_Dec;

FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, branch_id_ IN VARCHAR2, inventory_id_ IN NUMBER, product_id_ IN NUMBER, values_ IN Copy_Values_Rec, trn_inventory_product## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Create)
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_inventory_product## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Update)
FUNCTION CRUD_Update(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, branch_id_ IN VARCHAR2, inventory_id_ IN NUMBER, product_id_ IN NUMBER, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_inventory_product## IN VARCHAR2) RETURN Entity_Dec;

--@PoReadOnly(CRUD_Delete)
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, branch_id_ IN VARCHAR2, inventory_id_ IN NUMBER, product_id_ IN NUMBER, action$_ IN VARCHAR2, trn_inventory_product## IN VARCHAR2) RETURN Entity_Dec;

-----------------------------------------------------------------------------
------------------------- METHODS FOR TRN INVENTORY -------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
--------------------------- METHODS FOR TRN BRANCH --------------------------
-----------------------------------------------------------------------------


END Product_Handling_SVC;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

PROMPT Creating Product_Handling_SVC implementation

-- [IFS COMPLETE BLOCK PACKAGEBODY Product_Handling_SVC]
CREATE OR REPLACE PACKAGE BODY Product_Handling_SVC IS

-----------------------------------------------------------------------------
---------------------------- PRIVATE DECLARATIONS ---------------------------
-----------------------------------------------------------------------------

TYPE Trn_Unit_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   unit                           VARCHAR2(10),
   description                    VARCHAR2(1000));

TYPE Trn_Unit_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   unit                           VARCHAR2(10),
   description                    VARCHAR2(1000));

TYPE Trn_Unit_Key IS RECORD (
   unit                           VARCHAR2(10));

TYPE Trn_Product_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   company_id                     VARCHAR2(20),
   product_id                     NUMBER,
   description                    VARCHAR2(1000),
   price                          NUMBER,
   comments                       VARCHAR2(2000),
   unit                           VARCHAR2(10),
   brand_id                       VARCHAR2(10),
   category_id                    VARCHAR2(10),
   model_id                       VARCHAR2(100));

TYPE Trn_Product_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   company_id                     VARCHAR2(20),
   product_id                     NUMBER,
   description                    VARCHAR2(1000),
   price                          NUMBER,
   comments                       VARCHAR2(2000),
   unit                           VARCHAR2(10),
   brand_id                       VARCHAR2(10),
   category_id                    VARCHAR2(10),
   model_id                       VARCHAR2(100));

TYPE Trn_Product_Key IS RECORD (
   company_id                     VARCHAR2(20),
   product_id                     NUMBER);

TYPE Trn_Brand_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   brand_id                       VARCHAR2(10),
   name                           VARCHAR2(1000),
   comments                       VARCHAR2(2000));

TYPE Trn_Brand_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   brand_id                       VARCHAR2(10),
   name                           VARCHAR2(1000),
   comments                       VARCHAR2(2000));

TYPE Trn_Brand_Key IS RECORD (
   brand_id                       VARCHAR2(10));

TYPE Trn_Prod_Category_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   category_id                    VARCHAR2(10),
   name                           VARCHAR2(1000),
   comments                       VARCHAR2(2000));

TYPE Trn_Prod_Category_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   category_id                    VARCHAR2(10),
   name                           VARCHAR2(1000),
   comments                       VARCHAR2(2000));

TYPE Trn_Prod_Category_Key IS RECORD (
   category_id                    VARCHAR2(10));

TYPE Trn_Prod_Category_Brand_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   brand_id                       VARCHAR2(10),
   category_id                    VARCHAR2(10),
   brand                          VARCHAR2(4000),
   category                       VARCHAR2(4000));

TYPE Trn_Prod_Category_Brand_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   brand_id                       VARCHAR2(10),
   category_id                    VARCHAR2(10),
   brand                          VARCHAR2(4000),
   category                       VARCHAR2(4000));

TYPE Trn_Prod_Category_Brand_Key IS RECORD (
   brand_id                       VARCHAR2(10),
   category_id                    VARCHAR2(10));

TYPE Trn_Model_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   brand_id                       VARCHAR2(10),
   category_id                    VARCHAR2(10),
   model_id                       VARCHAR2(100),
   description                    VARCHAR2(2000));

TYPE Trn_Model_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   brand_id                       VARCHAR2(10),
   category_id                    VARCHAR2(10),
   model_id                       VARCHAR2(100),
   description                    VARCHAR2(2000));

TYPE Trn_Model_Key IS RECORD (
   brand_id                       VARCHAR2(10),
   category_id                    VARCHAR2(10),
   model_id                       VARCHAR2(100));

TYPE Trn_Inventory_Product_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   company_id                     VARCHAR2(20),
   branch_id                      VARCHAR2(20),
   inventory_id                   NUMBER,
   product_id                     NUMBER,
   quantity                       NUMBER,
   reorder_level                  NUMBER,
   reserved_quantity              NUMBER);

TYPE Trn_Inventory_Product_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   company_id                     VARCHAR2(20),
   branch_id                      VARCHAR2(20),
   inventory_id                   NUMBER,
   product_id                     NUMBER,
   quantity                       NUMBER,
   reorder_level                  NUMBER,
   reserved_quantity              NUMBER);

TYPE Trn_Inventory_Product_Key IS RECORD (
   company_id                     VARCHAR2(20),
   branch_id                      VARCHAR2(20),
   inventory_id                   NUMBER,
   product_id                     NUMBER);

TYPE Trn_Inventory_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   company_id                     VARCHAR2(20),
   branch_id                      VARCHAR2(20),
   inventory_id                   NUMBER,
   name                           VARCHAR2(200),
   picking_lead_time              NUMBER);

TYPE Trn_Inventory_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   company_id                     VARCHAR2(20),
   branch_id                      VARCHAR2(20),
   inventory_id                   NUMBER,
   name                           VARCHAR2(200),
   picking_lead_time              NUMBER);

TYPE Trn_Inventory_Key IS RECORD (
   company_id                     VARCHAR2(20),
   branch_id                      VARCHAR2(20),
   inventory_id                   NUMBER);

TYPE Trn_Branch_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   company_id                     VARCHAR2(20),
   branch_id                      VARCHAR2(20),
   name                           VARCHAR2(1000),
   time_offset                    NUMBER,
   country_id                     VARCHAR2(10),
   area_id                        VARCHAR2(10));

TYPE Trn_Branch_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   company_id                     VARCHAR2(20),
   branch_id                      VARCHAR2(20),
   name                           VARCHAR2(1000),
   time_offset                    NUMBER,
   country_id                     VARCHAR2(10),
   area_id                        VARCHAR2(10));

TYPE Trn_Branch_Key IS RECORD (
   company_id                     VARCHAR2(20),
   branch_id                      VARCHAR2(20));


-----------------------------------------------------------------------------
------------------------- METADATA PROVIDER METHODS -------------------------
-----------------------------------------------------------------------------

FUNCTION Verify_Metadata_Sql_Content_ (
   metadata_version_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   Verify_Metadata_Plsql_Content_(metadata_version_);
   RETURN 'OK';
END Verify_Metadata_Sql_Content_;


PROCEDURE Verify_Metadata_Plsql_Content_ (
   metadata_version_ IN VARCHAR2 )
IS
BEGIN
   IF (metadata_version_ != Get_Metadata_Version_) THEN
      Raise_Application_Error(-20187, 'OLDMETA: Metadata mismatch, reload with Product_Handling_SVC.Get_Metadata_Content_ and execute again.');
   END IF;
END Verify_Metadata_Plsql_Content_;


FUNCTION Get_Metadata_Content_ (
   context_ IN VARCHAR2 DEFAULT NULL ) RETURN CLOB
IS
BEGIN
   IF (context_ IS NULL) THEN
      RETURN Model_Design_SYS.Get_Data_Content_(Model_Design_SYS.SERVER_METADATA, 'projection', 'ProductHandling', language_ => Fnd_Session_API.Get_Language);
   ELSE
      RETURN Model_Design_SYS.Get_Data_Content_(Model_Design_SYS.SERVER_METADATA, 'projection', 'ProductHandling', language_ => Fnd_Session_API.Get_Language, scope_id_ => context_);
   END IF;
END Get_Metadata_Content_;


FUNCTION Get_Metadata_Category_ (
   context_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2
IS
   projection_category_  VARCHAR2(100);
BEGIN
   projection_category_ := 'Users';
   RETURN projection_category_;
END Get_Metadata_Category_;


FUNCTION Get_Metadata_Service_Group_ (
   context_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2
IS
   projection_service_group_  VARCHAR2(100);
BEGIN
   projection_service_group_ := 'Default';
   RETURN projection_service_group_;
END Get_Metadata_Service_Group_;


FUNCTION Get_Metadata_Version_ (
   context_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2
IS
BEGIN
   RETURN Model_Design_SYS.Get_Data_Version_(Model_Design_SYS.SERVER_METADATA, 'projection', 'ProductHandling');
END Get_Metadata_Version_;


-----------------------------------------------------------------------------
--------------------- IMPLEMENTATION METHOD DECLARATIONS --------------------
-----------------------------------------------------------------------------

FUNCTION Get_Objid_From_Etag___ (
   etag_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Get_Objversion_From_Etag___ (
   etag_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Get_Etag___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Combine_Value_Unit___ (
   value_ IN VARCHAR2,
   unit_  IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION To_Boolean_Arr____ (
   arr_ IN Text_Arr ) RETURN Boolean_Arr;

PROCEDURE Move_Product___ (
   company_id_ IN VARCHAR2,
   source_branch_id_ IN VARCHAR2,
   source_inventory_id_ IN NUMBER,
   product_id_ IN NUMBER,
   dest_branch_id_ IN VARCHAR2,
   dest_inventory_id_ IN NUMBER,
   quantityto_move_ IN NUMBER);

FUNCTION Get_Current_Quantity___ (
   para_company_id_ IN VARCHAR2,
   para_branch_id_ IN VARCHAR2,
   para_inventory_id_ IN NUMBER,
   para_product_id_ IN NUMBER) RETURN NUMBER;

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Unit_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Product_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Brand_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Prod_Category_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Prod_Category_Brand_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Model_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Inventory_Product_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Unit_Rec );

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Product_Rec );

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Brand_Rec );

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Prod_Category_Rec );

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Prod_Category_Brand_Rec );

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Model_Rec );

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Inventory_Product_Rec );

PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Unit_Rec );

PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Product_Rec );

PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Brand_Rec );

PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Prod_Category_Rec );

PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Prod_Category_Brand_Rec );

PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Model_Rec );

PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Inventory_Product_Rec );

FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Unit_Default_Copy_Rec) RETURN Trn_Unit_Rec;

FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Product_Default_Copy_Rec) RETURN Trn_Product_Rec;

FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Brand_Default_Copy_Rec) RETURN Trn_Brand_Rec;

FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Prod_Category_Default_Copy_Rec) RETURN Trn_Prod_Category_Rec;

FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Prod_Category_Brand_Default_Copy_Rec) RETURN Trn_Prod_Category_Brand_Rec;

FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Model_Default_Copy_Rec) RETURN Trn_Model_Rec;

FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Inventory_Product_Default_Copy_Rec) RETURN Trn_Inventory_Product_Rec;

FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_unit## IN VARCHAR2 ) RETURN Trn_Unit_Rec;

FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_product## IN VARCHAR2 ) RETURN Trn_Product_Rec;

FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_brand## IN VARCHAR2 ) RETURN Trn_Brand_Rec;

FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_prod_category## IN VARCHAR2 ) RETURN Trn_Prod_Category_Rec;

FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_prod_category_brand## IN VARCHAR2 ) RETURN Trn_Prod_Category_Brand_Rec;

FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_model## IN VARCHAR2 ) RETURN Trn_Model_Rec;

FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_inventory_product## IN VARCHAR2 ) RETURN Trn_Inventory_Product_Rec;

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Unit_Key );

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Product_Key );

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Brand_Key );

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Prod_Category_Key );

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Prod_Category_Brand_Key );

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Model_Key );

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Inventory_Product_Key );

PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Unit_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 );

PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Unit_Rec );

PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 );

PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Product_Rec );

PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 );

PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Brand_Rec );

PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Prod_Category_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 );

PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Prod_Category_Rec );

PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Prod_Category_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 );

PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Prod_Category_Brand_Rec );

PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Model_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 );

PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Model_Rec );

PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Inventory_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 );

PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Inventory_Product_Rec );

PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Unit_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 );

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Unit_Rec );

PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Product_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 );

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Product_Rec );

PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Brand_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 );

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Brand_Rec );

PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Prod_Category_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 );

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Prod_Category_Rec );

PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Prod_Category_Brand_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 );

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Prod_Category_Brand_Rec );

PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Model_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 );

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Model_Rec );

PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Inventory_Product_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 );

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Inventory_Product_Rec );

PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Unit_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Prod_Category_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Prod_Category_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Model_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Inventory_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Unit_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Prod_Category_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Prod_Category_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Model_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Inventory_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Unit_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Product_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Brand_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Prod_Category_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Prod_Category_Brand_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Model_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Inventory_Product_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- GLOBAL METHODS -----------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Do_Move_Product(company_id_ IN VARCHAR2, source_branch_id_ IN VARCHAR2, source_inventory_id_ IN NUMBER, product_id_ IN NUMBER, dest_branch_id_ IN VARCHAR2, dest_inventory_id_ IN NUMBER, quantityto_move_ IN NUMBER, unbound## IN VARCHAR2)
IS
BEGIN
   General_SYS.Init_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'Do_Move_Product', trace_only_ => TRUE);
   Log_SYS.Init_Method('Product_Handling_SVC', 'Do_Move_Product');
   Move_Product___(company_id_, source_branch_id_, source_inventory_id_, product_id_, dest_branch_id_, dest_inventory_id_, quantityto_move_);
END Do_Move_Product;


FUNCTION Rd_Get_Current_Quantity(para_company_id_ IN VARCHAR2, para_branch_id_ IN VARCHAR2, para_inventory_id_ IN NUMBER, para_product_id_ IN NUMBER, unbound## IN VARCHAR2) RETURN Number_Arr PIPELINED
IS
   rec_ NUMBER;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'Rd_Get_Current_Quantity');
   rec_ := Get_Current_Quantity___(para_company_id_, para_branch_id_, para_inventory_id_, para_product_id_);
   PIPE ROW (rec_);
END Rd_Get_Current_Quantity;


-----------------------------------------------------------------------------
-------------------- PRIVATE METHODS FOR TRN UNIT ---------------------------
-----------------------------------------------------------------------------

FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_unit## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Trn_Unit_Key;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Unit_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;



--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_unit## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Unit_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;


--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, unit_ IN VARCHAR2, values_ IN Copy_Values_Rec, trn_unit## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Unit_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   key_.unit := unit_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Unit_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;


FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_unit## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Unit_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Create');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Unit_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('UNIT', key_.unit, ret_.attr);
   return ret_;
END CRUD_Create;


FUNCTION CRUD_Update(etag_ IN VARCHAR2, unit_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_unit## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Unit_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Update');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.unit := unit_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Unit_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('UNIT', key_.unit, ret_.attr);
   return ret_;
END CRUD_Update;


FUNCTION CRUD_Delete(etag_ IN VARCHAR2, unit_ IN VARCHAR2, action$_ IN VARCHAR2, trn_unit## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Unit_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Delete');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.unit := unit_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Unit_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.unit IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('UNIT', rec_.unit, attr_);
   END IF;
   IF (rec_.description IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DESCRIPTION', rec_.description, attr_);
   END IF;
END Add_To_Attr_From_Rec___;


PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Unit_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('UNIT', attr_)) THEN
      rec_.unit := Client_SYS.Get_Item_Value('UNIT', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('DESCRIPTION', attr_)) THEN
      rec_.description := Client_SYS.Get_Item_Value('DESCRIPTION', attr_);
   END IF;
END Add_To_Rec_From_Attr___;


PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Unit_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('UNIT', attr_)) THEN
      rec_.unit := Client_SYS.Get_Item_Value('UNIT', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;


FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Unit_Default_Copy_Rec) RETURN Trn_Unit_Rec
IS
   rec_ Trn_Unit_Rec;
BEGIN
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.unit := default_copy_rec_.unit;
   rec_.description := default_copy_rec_.description;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_unit## IN VARCHAR2 ) RETURN Trn_Unit_Rec
IS
   default_copy_rec_ Trn_Unit_Default_Copy_Rec;
   rec_ Trn_Unit_Rec;
BEGIN
   SELECT
      NULL objgrants,
      unit unit,
      description description   INTO default_copy_rec_
   FROM TRN_UNIT
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;


PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Unit_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  TRN_UNIT
      WHERE unit = key_.unit;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Trn_Unit_API.lu_name_);
END Get_Objid_Objversion___;


PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Unit_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Trn_Unit_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Unit_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Unit_Rec )
IS
BEGIN
   NULL;
END CRUD_Default___;


--@IgnoreMissingSysinit
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Unit_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Trn_Unit_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, trn_unit## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Product_Handling_SVC.CRUD_Default('', trn_unit## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;


PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Unit_Rec )
IS
BEGIN
   NULL;
END CRUD_Default_Copy___;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Unit_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Unit_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT unit
      INTO key_.unit
      FROM TRN_UNIT
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Unit_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Unit_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Unit_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Unit_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE METHODS FOR TRN PRODUCT ------------------------
-----------------------------------------------------------------------------

FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_product## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Trn_Product_Key;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Product_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;



--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_product## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Product_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;


--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, product_id_ IN NUMBER, values_ IN Copy_Values_Rec, trn_product## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Product_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   key_.company_id := company_id_;
   key_.product_id := product_id_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Product_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;


FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_product## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Product_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Create');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Product_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('COMPANY_ID', key_.company_id, ret_.attr);
   Client_SYS.Set_Item_Value('PRODUCT_ID', key_.product_id, ret_.attr);
   return ret_;
END CRUD_Create;


FUNCTION CRUD_Update(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, product_id_ IN NUMBER, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_product## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Product_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Update');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.company_id := company_id_;
   key_.product_id := product_id_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Product_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('COMPANY_ID', key_.company_id, ret_.attr);
   Client_SYS.Set_Item_Value('PRODUCT_ID', key_.product_id, ret_.attr);
   return ret_;
END CRUD_Update;


FUNCTION CRUD_Delete(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, product_id_ IN NUMBER, action$_ IN VARCHAR2, trn_product## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Product_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Delete');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.company_id := company_id_;
   key_.product_id := product_id_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Product_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.company_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('COMPANY_ID', rec_.company_id, attr_);
   END IF;
   IF (rec_.product_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('PRODUCT_ID', rec_.product_id, attr_);
   END IF;
   IF (rec_.description IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DESCRIPTION', rec_.description, attr_);
   END IF;
   IF (rec_.price IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('PRICE', rec_.price, attr_);
   END IF;
   IF (rec_.comments IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('COMMENTS', rec_.comments, attr_);
   END IF;
   IF (rec_.unit IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('UNIT', rec_.unit, attr_);
   END IF;
   IF (rec_.brand_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('BRAND_ID', rec_.brand_id, attr_);
   END IF;
   IF (rec_.category_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CATEGORY_ID', rec_.category_id, attr_);
   END IF;
   IF (rec_.model_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('MODEL_ID', rec_.model_id, attr_);
   END IF;
END Add_To_Attr_From_Rec___;


PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Product_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('COMPANY_ID', attr_)) THEN
      rec_.company_id := Client_SYS.Get_Item_Value('COMPANY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('PRODUCT_ID', attr_)) THEN
      rec_.product_id := Client_SYS.Get_Item_Value('PRODUCT_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('DESCRIPTION', attr_)) THEN
      rec_.description := Client_SYS.Get_Item_Value('DESCRIPTION', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('PRICE', attr_)) THEN
      rec_.price := Client_SYS.Get_Item_Value('PRICE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('COMMENTS', attr_)) THEN
      rec_.comments := Client_SYS.Get_Item_Value('COMMENTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('UNIT', attr_)) THEN
      rec_.unit := Client_SYS.Get_Item_Value('UNIT', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('BRAND_ID', attr_)) THEN
      rec_.brand_id := Client_SYS.Get_Item_Value('BRAND_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CATEGORY_ID', attr_)) THEN
      rec_.category_id := Client_SYS.Get_Item_Value('CATEGORY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('MODEL_ID', attr_)) THEN
      rec_.model_id := Client_SYS.Get_Item_Value('MODEL_ID', attr_);
   END IF;
END Add_To_Rec_From_Attr___;


PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Product_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('COMPANY_ID', attr_)) THEN
      rec_.company_id := Client_SYS.Get_Item_Value('COMPANY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('PRODUCT_ID', attr_)) THEN
      rec_.product_id := Client_SYS.Get_Item_Value('PRODUCT_ID', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;


FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Product_Default_Copy_Rec) RETURN Trn_Product_Rec
IS
   rec_ Trn_Product_Rec;
BEGIN
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.company_id := default_copy_rec_.company_id;
   rec_.product_id := default_copy_rec_.product_id;
   rec_.description := default_copy_rec_.description;
   rec_.price := default_copy_rec_.price;
   rec_.comments := default_copy_rec_.comments;
   rec_.unit := default_copy_rec_.unit;
   rec_.brand_id := default_copy_rec_.brand_id;
   rec_.category_id := default_copy_rec_.category_id;
   rec_.model_id := default_copy_rec_.model_id;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_product## IN VARCHAR2 ) RETURN Trn_Product_Rec
IS
   default_copy_rec_ Trn_Product_Default_Copy_Rec;
   rec_ Trn_Product_Rec;
BEGIN
   SELECT
      NULL objgrants,
      company_id company_id,
      product_id product_id,
      description description,
      price price,
      comments comments,
      unit unit,
      brand_id brand_id,
      category_id category_id,
      model_id model_id   INTO default_copy_rec_
   FROM TRN_PRODUCT
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;


PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Product_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  TRN_PRODUCT
      WHERE company_id = key_.company_id
      AND   product_id = key_.product_id;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Trn_Product_API.lu_name_);
END Get_Objid_Objversion___;


PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Trn_Product_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Product_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Product_Rec )
IS
BEGIN
   NULL;
END CRUD_Default___;


--@IgnoreMissingSysinit
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Product_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Trn_Product_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, trn_product## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Product_Handling_SVC.CRUD_Default('', trn_product## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;


PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Product_Rec )
IS
BEGIN
   NULL;
END CRUD_Default_Copy___;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Product_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT company_id, product_id
      INTO key_.company_id, key_.product_id
      FROM TRN_PRODUCT
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Product_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Product_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Product_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE METHODS FOR TRN BRAND --------------------------
-----------------------------------------------------------------------------

FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_brand## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Trn_Brand_Key;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Brand_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;



--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_brand## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Brand_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;


--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, values_ IN Copy_Values_Rec, trn_brand## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Brand_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   key_.brand_id := brand_id_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Brand_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;


FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_brand## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Brand_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Create');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Brand_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('BRAND_ID', key_.brand_id, ret_.attr);
   return ret_;
END CRUD_Create;


FUNCTION CRUD_Update(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_brand## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Brand_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Update');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.brand_id := brand_id_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Brand_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('BRAND_ID', key_.brand_id, ret_.attr);
   return ret_;
END CRUD_Update;


FUNCTION CRUD_Delete(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, action$_ IN VARCHAR2, trn_brand## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Brand_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Delete');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.brand_id := brand_id_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Brand_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.brand_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('BRAND_ID', rec_.brand_id, attr_);
   END IF;
   IF (rec_.name IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('NAME', rec_.name, attr_);
   END IF;
   IF (rec_.comments IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('COMMENTS', rec_.comments, attr_);
   END IF;
END Add_To_Attr_From_Rec___;


PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Brand_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('BRAND_ID', attr_)) THEN
      rec_.brand_id := Client_SYS.Get_Item_Value('BRAND_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('NAME', attr_)) THEN
      rec_.name := Client_SYS.Get_Item_Value('NAME', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('COMMENTS', attr_)) THEN
      rec_.comments := Client_SYS.Get_Item_Value('COMMENTS', attr_);
   END IF;
END Add_To_Rec_From_Attr___;


PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Brand_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('BRAND_ID', attr_)) THEN
      rec_.brand_id := Client_SYS.Get_Item_Value('BRAND_ID', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;


FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Brand_Default_Copy_Rec) RETURN Trn_Brand_Rec
IS
   rec_ Trn_Brand_Rec;
BEGIN
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.brand_id := default_copy_rec_.brand_id;
   rec_.name := default_copy_rec_.name;
   rec_.comments := default_copy_rec_.comments;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_brand## IN VARCHAR2 ) RETURN Trn_Brand_Rec
IS
   default_copy_rec_ Trn_Brand_Default_Copy_Rec;
   rec_ Trn_Brand_Rec;
BEGIN
   SELECT
      NULL objgrants,
      brand_id brand_id,
      name name,
      comments comments   INTO default_copy_rec_
   FROM TRN_BRAND
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;


PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Brand_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  TRN_BRAND
      WHERE brand_id = key_.brand_id;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Trn_Brand_API.lu_name_);
END Get_Objid_Objversion___;


PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Trn_Brand_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Brand_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Brand_Rec )
IS
BEGIN
   NULL;
END CRUD_Default___;


--@IgnoreMissingSysinit
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Brand_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Trn_Brand_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, trn_brand## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Product_Handling_SVC.CRUD_Default('', trn_brand## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;


PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Brand_Rec )
IS
BEGIN
   NULL;
END CRUD_Default_Copy___;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Brand_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT brand_id
      INTO key_.brand_id
      FROM TRN_BRAND
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Brand_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Brand_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Brand_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE METHODS FOR TRN PROD CATEGORY ------------------
-----------------------------------------------------------------------------

FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_prod_category## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Trn_Prod_Category_Key;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Prod_Category_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;



--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_prod_category## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Prod_Category_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;


--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, category_id_ IN VARCHAR2, values_ IN Copy_Values_Rec, trn_prod_category## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Prod_Category_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   key_.category_id := category_id_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Prod_Category_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;


FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_prod_category## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Prod_Category_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Create');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Prod_Category_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('CATEGORY_ID', key_.category_id, ret_.attr);
   return ret_;
END CRUD_Create;


FUNCTION CRUD_Update(etag_ IN VARCHAR2, category_id_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_prod_category## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Prod_Category_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Update');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.category_id := category_id_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Prod_Category_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('CATEGORY_ID', key_.category_id, ret_.attr);
   return ret_;
END CRUD_Update;


FUNCTION CRUD_Delete(etag_ IN VARCHAR2, category_id_ IN VARCHAR2, action$_ IN VARCHAR2, trn_prod_category## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Prod_Category_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Delete');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.category_id := category_id_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Prod_Category_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.category_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CATEGORY_ID', rec_.category_id, attr_);
   END IF;
   IF (rec_.name IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('NAME', rec_.name, attr_);
   END IF;
   IF (rec_.comments IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('COMMENTS', rec_.comments, attr_);
   END IF;
END Add_To_Attr_From_Rec___;


PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Prod_Category_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CATEGORY_ID', attr_)) THEN
      rec_.category_id := Client_SYS.Get_Item_Value('CATEGORY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('NAME', attr_)) THEN
      rec_.name := Client_SYS.Get_Item_Value('NAME', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('COMMENTS', attr_)) THEN
      rec_.comments := Client_SYS.Get_Item_Value('COMMENTS', attr_);
   END IF;
END Add_To_Rec_From_Attr___;


PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Prod_Category_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('CATEGORY_ID', attr_)) THEN
      rec_.category_id := Client_SYS.Get_Item_Value('CATEGORY_ID', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;


FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Prod_Category_Default_Copy_Rec) RETURN Trn_Prod_Category_Rec
IS
   rec_ Trn_Prod_Category_Rec;
BEGIN
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.category_id := default_copy_rec_.category_id;
   rec_.name := default_copy_rec_.name;
   rec_.comments := default_copy_rec_.comments;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_prod_category## IN VARCHAR2 ) RETURN Trn_Prod_Category_Rec
IS
   default_copy_rec_ Trn_Prod_Category_Default_Copy_Rec;
   rec_ Trn_Prod_Category_Rec;
BEGIN
   SELECT
      NULL objgrants,
      category_id category_id,
      name name,
      comments comments   INTO default_copy_rec_
   FROM TRN_PROD_CATEGORY
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;


PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Prod_Category_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  TRN_PROD_CATEGORY
      WHERE category_id = key_.category_id;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Trn_Prod_Category_API.lu_name_);
END Get_Objid_Objversion___;


PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Prod_Category_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Trn_Prod_Category_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Prod_Category_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Prod_Category_Rec )
IS
BEGIN
   NULL;
END CRUD_Default___;


--@IgnoreMissingSysinit
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Prod_Category_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Trn_Prod_Category_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, trn_prod_category## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Product_Handling_SVC.CRUD_Default('', trn_prod_category## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;


PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Prod_Category_Rec )
IS
BEGIN
   NULL;
END CRUD_Default_Copy___;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Prod_Category_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Prod_Category_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT category_id
      INTO key_.category_id
      FROM TRN_PROD_CATEGORY
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Prod_Category_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Prod_Category_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Prod_Category_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Prod_Category_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE METHODS FOR TRN PROD CATEGORY BRAND ------------
-----------------------------------------------------------------------------

FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_prod_category_brand## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Trn_Prod_Category_Brand_Key;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Prod_Category_Brand_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;



--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_prod_category_brand## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Prod_Category_Brand_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;


--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, values_ IN Copy_Values_Rec, trn_prod_category_brand## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Prod_Category_Brand_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   key_.brand_id := brand_id_;
   key_.category_id := category_id_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Prod_Category_Brand_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;


FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_prod_category_brand## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Prod_Category_Brand_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Create');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Prod_Category_Brand_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('BRAND_ID', key_.brand_id, ret_.attr);
   Client_SYS.Set_Item_Value('CATEGORY_ID', key_.category_id, ret_.attr);
   return ret_;
END CRUD_Create;


FUNCTION CRUD_Update(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_prod_category_brand## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Prod_Category_Brand_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Update');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.brand_id := brand_id_;
   key_.category_id := category_id_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Prod_Category_Brand_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('BRAND_ID', key_.brand_id, ret_.attr);
   Client_SYS.Set_Item_Value('CATEGORY_ID', key_.category_id, ret_.attr);
   return ret_;
END CRUD_Update;


FUNCTION CRUD_Delete(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, action$_ IN VARCHAR2, trn_prod_category_brand## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Prod_Category_Brand_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Delete');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.brand_id := brand_id_;
   key_.category_id := category_id_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Prod_Category_Brand_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.brand_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('BRAND_ID', rec_.brand_id, attr_);
   END IF;
   IF (rec_.category_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CATEGORY_ID', rec_.category_id, attr_);
   END IF;
   IF (rec_.brand IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('BRAND', rec_.brand, attr_);
   END IF;
   IF (rec_.category IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CATEGORY', rec_.category, attr_);
   END IF;
END Add_To_Attr_From_Rec___;


PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Prod_Category_Brand_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('BRAND_ID', attr_)) THEN
      rec_.brand_id := Client_SYS.Get_Item_Value('BRAND_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CATEGORY_ID', attr_)) THEN
      rec_.category_id := Client_SYS.Get_Item_Value('CATEGORY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('BRAND', attr_)) THEN
      rec_.brand := Client_SYS.Get_Item_Value('BRAND', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CATEGORY', attr_)) THEN
      rec_.category := Client_SYS.Get_Item_Value('CATEGORY', attr_);
   END IF;
END Add_To_Rec_From_Attr___;


PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Prod_Category_Brand_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('BRAND_ID', attr_)) THEN
      rec_.brand_id := Client_SYS.Get_Item_Value('BRAND_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CATEGORY_ID', attr_)) THEN
      rec_.category_id := Client_SYS.Get_Item_Value('CATEGORY_ID', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;


FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Prod_Category_Brand_Default_Copy_Rec) RETURN Trn_Prod_Category_Brand_Rec
IS
   rec_ Trn_Prod_Category_Brand_Rec;
BEGIN
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.brand_id := default_copy_rec_.brand_id;
   rec_.category_id := default_copy_rec_.category_id;
   rec_.brand := default_copy_rec_.brand;
   rec_.category := default_copy_rec_.category;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_prod_category_brand## IN VARCHAR2 ) RETURN Trn_Prod_Category_Brand_Rec
IS
   default_copy_rec_ Trn_Prod_Category_Brand_Default_Copy_Rec;
   rec_ Trn_Prod_Category_Brand_Rec;
BEGIN
   SELECT
      NULL objgrants,
      brand_id brand_id,
      category_id category_id,
      Trn_Brand_API.Get_Name(brand_id) brand,
      Trn_Prod_Category_API.Get_Name(category_id) category   INTO default_copy_rec_
   FROM TRN_PROD_CATEGORY_BRAND
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;


PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Prod_Category_Brand_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  TRN_PROD_CATEGORY_BRAND
      WHERE brand_id = key_.brand_id
      AND   category_id = key_.category_id;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Trn_Prod_Category_Brand_API.lu_name_);
END Get_Objid_Objversion___;


PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Prod_Category_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Trn_Prod_Category_Brand_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Prod_Category_Brand_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Prod_Category_Brand_Rec )
IS
BEGIN
   NULL;
END CRUD_Default___;


--@IgnoreMissingSysinit
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Prod_Category_Brand_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Trn_Prod_Category_Brand_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, trn_prod_category_brand## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Product_Handling_SVC.CRUD_Default('', trn_prod_category_brand## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;


PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Prod_Category_Brand_Rec )
IS
BEGIN
   NULL;
END CRUD_Default_Copy___;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Prod_Category_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Prod_Category_Brand_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT brand_id, category_id
      INTO key_.brand_id, key_.category_id
      FROM TRN_PROD_CATEGORY_BRAND
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Prod_Category_Brand_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Prod_Category_Brand_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Prod_Category_Brand_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Prod_Category_Brand_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE METHODS FOR TRN MODEL --------------------------
-----------------------------------------------------------------------------

FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_model## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Trn_Model_Key;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Model_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;



--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_model## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Model_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;


--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, model_id_ IN VARCHAR2, values_ IN Copy_Values_Rec, trn_model## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Model_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   key_.brand_id := brand_id_;
   key_.category_id := category_id_;
   key_.model_id := model_id_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Model_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;


FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_model## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Model_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Create');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Model_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('BRAND_ID', key_.brand_id, ret_.attr);
   Client_SYS.Set_Item_Value('CATEGORY_ID', key_.category_id, ret_.attr);
   Client_SYS.Set_Item_Value('MODEL_ID', key_.model_id, ret_.attr);
   return ret_;
END CRUD_Create;


FUNCTION CRUD_Update(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, model_id_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_model## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Model_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Update');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.brand_id := brand_id_;
   key_.category_id := category_id_;
   key_.model_id := model_id_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Model_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('BRAND_ID', key_.brand_id, ret_.attr);
   Client_SYS.Set_Item_Value('CATEGORY_ID', key_.category_id, ret_.attr);
   Client_SYS.Set_Item_Value('MODEL_ID', key_.model_id, ret_.attr);
   return ret_;
END CRUD_Update;


FUNCTION CRUD_Delete(etag_ IN VARCHAR2, brand_id_ IN VARCHAR2, category_id_ IN VARCHAR2, model_id_ IN VARCHAR2, action$_ IN VARCHAR2, trn_model## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Model_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Delete');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.brand_id := brand_id_;
   key_.category_id := category_id_;
   key_.model_id := model_id_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Model_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.brand_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('BRAND_ID', rec_.brand_id, attr_);
   END IF;
   IF (rec_.category_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CATEGORY_ID', rec_.category_id, attr_);
   END IF;
   IF (rec_.model_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('MODEL_ID', rec_.model_id, attr_);
   END IF;
   IF (rec_.description IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DESCRIPTION', rec_.description, attr_);
   END IF;
END Add_To_Attr_From_Rec___;


PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Model_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('BRAND_ID', attr_)) THEN
      rec_.brand_id := Client_SYS.Get_Item_Value('BRAND_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CATEGORY_ID', attr_)) THEN
      rec_.category_id := Client_SYS.Get_Item_Value('CATEGORY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('MODEL_ID', attr_)) THEN
      rec_.model_id := Client_SYS.Get_Item_Value('MODEL_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('DESCRIPTION', attr_)) THEN
      rec_.description := Client_SYS.Get_Item_Value('DESCRIPTION', attr_);
   END IF;
END Add_To_Rec_From_Attr___;


PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Model_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('BRAND_ID', attr_)) THEN
      rec_.brand_id := Client_SYS.Get_Item_Value('BRAND_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CATEGORY_ID', attr_)) THEN
      rec_.category_id := Client_SYS.Get_Item_Value('CATEGORY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('MODEL_ID', attr_)) THEN
      rec_.model_id := Client_SYS.Get_Item_Value('MODEL_ID', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;


FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Model_Default_Copy_Rec) RETURN Trn_Model_Rec
IS
   rec_ Trn_Model_Rec;
BEGIN
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.brand_id := default_copy_rec_.brand_id;
   rec_.category_id := default_copy_rec_.category_id;
   rec_.model_id := default_copy_rec_.model_id;
   rec_.description := default_copy_rec_.description;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_model## IN VARCHAR2 ) RETURN Trn_Model_Rec
IS
   default_copy_rec_ Trn_Model_Default_Copy_Rec;
   rec_ Trn_Model_Rec;
BEGIN
   SELECT
      NULL objgrants,
      brand_id brand_id,
      category_id category_id,
      model_id model_id,
      description description   INTO default_copy_rec_
   FROM TRN_MODEL
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;


PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Model_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  TRN_MODEL
      WHERE brand_id = key_.brand_id
      AND   category_id = key_.category_id
      AND   model_id = key_.model_id;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Trn_Model_API.lu_name_);
END Get_Objid_Objversion___;


PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Model_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Trn_Model_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Model_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Model_Rec )
IS
BEGIN
   NULL;
END CRUD_Default___;


--@IgnoreMissingSysinit
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Model_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Trn_Model_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, trn_model## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Product_Handling_SVC.CRUD_Default('', trn_model## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;


PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Model_Rec )
IS
BEGIN
   NULL;
END CRUD_Default_Copy___;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Model_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Model_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT brand_id, category_id, model_id
      INTO key_.brand_id, key_.category_id, key_.model_id
      FROM TRN_MODEL
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Model_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Model_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Model_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Model_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE METHODS FOR TRN INVENTORY PRODUCT --------------
-----------------------------------------------------------------------------

FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, trn_inventory_product## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Trn_Inventory_Product_Key;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Inventory_Product_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;



--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, trn_inventory_product## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Inventory_Product_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;


--@IgnoreMissingSysinit
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, branch_id_ IN VARCHAR2, inventory_id_ IN NUMBER, product_id_ IN NUMBER, values_ IN Copy_Values_Rec, trn_inventory_product## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Inventory_Product_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Default_Copy');
   key_.company_id := company_id_;
   key_.branch_id := branch_id_;
   key_.inventory_id := inventory_id_;
   key_.product_id := product_id_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Inventory_Product_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;


FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, trn_inventory_product## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Inventory_Product_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Create');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Inventory_Product_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('COMPANY_ID', key_.company_id, ret_.attr);
   Client_SYS.Set_Item_Value('BRANCH_ID', key_.branch_id, ret_.attr);
   Client_SYS.Set_Item_Value('INVENTORY_ID', key_.inventory_id, ret_.attr);
   Client_SYS.Set_Item_Value('PRODUCT_ID', key_.product_id, ret_.attr);
   return ret_;
END CRUD_Create;


FUNCTION CRUD_Update(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, branch_id_ IN VARCHAR2, inventory_id_ IN NUMBER, product_id_ IN NUMBER, attr_ IN VARCHAR2, action$_ IN VARCHAR2, trn_inventory_product## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Inventory_Product_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Update');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.company_id := company_id_;
   key_.branch_id := branch_id_;
   key_.inventory_id := inventory_id_;
   key_.product_id := product_id_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Trn_Inventory_Product_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('COMPANY_ID', key_.company_id, ret_.attr);
   Client_SYS.Set_Item_Value('BRANCH_ID', key_.branch_id, ret_.attr);
   Client_SYS.Set_Item_Value('INVENTORY_ID', key_.inventory_id, ret_.attr);
   Client_SYS.Set_Item_Value('PRODUCT_ID', key_.product_id, ret_.attr);
   return ret_;
END CRUD_Update;


FUNCTION CRUD_Delete(etag_ IN VARCHAR2, company_id_ IN VARCHAR2, branch_id_ IN VARCHAR2, inventory_id_ IN NUMBER, product_id_ IN NUMBER, action$_ IN VARCHAR2, trn_inventory_product## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Trn_Inventory_Product_Key;
BEGIN
   General_SYS.Init_Projection_Method(Product_Handling_SVC.lu_name_, 'Product_Handling_SVC', 'CRUD_Delete');
   Log_SYS.Init_Method('Product_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.company_id := company_id_;
   key_.branch_id := branch_id_;
   key_.inventory_id := inventory_id_;
   key_.product_id := product_id_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Trn_Inventory_Product_Rec,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.company_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('COMPANY_ID', rec_.company_id, attr_);
   END IF;
   IF (rec_.branch_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('BRANCH_ID', rec_.branch_id, attr_);
   END IF;
   IF (rec_.inventory_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('INVENTORY_ID', rec_.inventory_id, attr_);
   END IF;
   IF (rec_.product_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('PRODUCT_ID', rec_.product_id, attr_);
   END IF;
   IF (rec_.quantity IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('QUANTITY', rec_.quantity, attr_);
   END IF;
   IF (rec_.reorder_level IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REORDER_LEVEL', rec_.reorder_level, attr_);
   END IF;
   IF (rec_.reserved_quantity IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('RESERVED_QUANTITY', rec_.reserved_quantity, attr_);
   END IF;
END Add_To_Attr_From_Rec___;


PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT NOCOPY Trn_Inventory_Product_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('COMPANY_ID', attr_)) THEN
      rec_.company_id := Client_SYS.Get_Item_Value('COMPANY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('BRANCH_ID', attr_)) THEN
      rec_.branch_id := Client_SYS.Get_Item_Value('BRANCH_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('INVENTORY_ID', attr_)) THEN
      rec_.inventory_id := Client_SYS.Get_Item_Value('INVENTORY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('PRODUCT_ID', attr_)) THEN
      rec_.product_id := Client_SYS.Get_Item_Value('PRODUCT_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('QUANTITY', attr_)) THEN
      rec_.quantity := Client_SYS.Get_Item_Value('QUANTITY', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('REORDER_LEVEL', attr_)) THEN
      rec_.reorder_level := Client_SYS.Get_Item_Value('REORDER_LEVEL', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('RESERVED_QUANTITY', attr_)) THEN
      rec_.reserved_quantity := Client_SYS.Get_Item_Value('RESERVED_QUANTITY', attr_);
   END IF;
END Add_To_Rec_From_Attr___;


PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT NOCOPY Trn_Inventory_Product_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('COMPANY_ID', attr_)) THEN
      rec_.company_id := Client_SYS.Get_Item_Value('COMPANY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('BRANCH_ID', attr_)) THEN
      rec_.branch_id := Client_SYS.Get_Item_Value('BRANCH_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('INVENTORY_ID', attr_)) THEN
      rec_.inventory_id := Client_SYS.Get_Item_Value('INVENTORY_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('PRODUCT_ID', attr_)) THEN
      rec_.product_id := Client_SYS.Get_Item_Value('PRODUCT_ID', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;


FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Trn_Inventory_Product_Default_Copy_Rec) RETURN Trn_Inventory_Product_Rec
IS
   rec_ Trn_Inventory_Product_Rec;
BEGIN
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.company_id := default_copy_rec_.company_id;
   rec_.branch_id := default_copy_rec_.branch_id;
   rec_.inventory_id := default_copy_rec_.inventory_id;
   rec_.product_id := default_copy_rec_.product_id;
   rec_.quantity := default_copy_rec_.quantity;
   rec_.reorder_level := default_copy_rec_.reorder_level;
   rec_.reserved_quantity := default_copy_rec_.reserved_quantity;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   trn_inventory_product## IN VARCHAR2 ) RETURN Trn_Inventory_Product_Rec
IS
   default_copy_rec_ Trn_Inventory_Product_Default_Copy_Rec;
   rec_ Trn_Inventory_Product_Rec;
BEGIN
   SELECT
      NULL objgrants,
      company_id company_id,
      branch_id branch_id,
      inventory_id inventory_id,
      product_id product_id,
      quantity quantity,
      reorder_level reorder_level,
      reserved_quantity reserved_quantity   INTO default_copy_rec_
   FROM TRN_INVENTORY_PRODUCT
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;


PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Trn_Inventory_Product_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  TRN_INVENTORY_PRODUCT
      WHERE company_id = key_.company_id
      AND   branch_id = key_.branch_id
      AND   inventory_id = key_.inventory_id
      AND   product_id = key_.product_id;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Trn_Inventory_Product_API.lu_name_);
END Get_Objid_Objversion___;


PROCEDURE CRUD_Default___ (
   key_  IN     Trn_Inventory_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Trn_Inventory_Product_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Inventory_Product_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT NOCOPY Trn_Inventory_Product_Rec )
IS
BEGIN
   NULL;
END CRUD_Default___;


--@IgnoreMissingSysinit
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Trn_Inventory_Product_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Trn_Inventory_Product_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, trn_inventory_product## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Product_Handling_SVC.CRUD_Default('', trn_inventory_product## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;


PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT NOCOPY Trn_Inventory_Product_Rec )
IS
BEGIN
   NULL;
END CRUD_Default_Copy___;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Inventory_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Trn_Inventory_Product_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT company_id, branch_id, inventory_id, product_id
      INTO key_.company_id, key_.branch_id, key_.inventory_id, key_.product_id
      FROM TRN_INVENTORY_PRODUCT
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN OUT NOCOPY Trn_Inventory_Product_Key,
   attr_ IN OUT NOCOPY VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Inventory_Product_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT NOCOPY VARCHAR2,
   key_  IN     Trn_Inventory_Product_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Trn_Inventory_Product_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;

-----------------------------------------------------------------------------
-------------------- HELPER METHODS -----------------------------------------
-----------------------------------------------------------------------------

FUNCTION Get_Objid_From_Etag___ (
   etag_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   delim_pos_ INTEGER := instr(etag_, ':');
BEGIN
   RETURN substr(etag_, 4, delim_pos_-4);
END Get_Objid_From_Etag___;


FUNCTION Get_Objversion_From_Etag___ (
   etag_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   delim_pos_ INTEGER := instr(etag_, ':');
BEGIN
   RETURN substr(etag_, delim_pos_+1, length(etag_)-delim_pos_-1);
END Get_Objversion_From_Etag___;


FUNCTION Get_Etag___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN 'W/"'||objid_||':'||objversion_||'"';
END Get_Etag___;


FUNCTION Combine_Value_Unit___ (
   value_ IN VARCHAR2,
   unit_  IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (value_ IS NULL) THEN
      RETURN NULL;
   ELSE
      RETURN value_||'|'||unit_;
   END IF;
END Combine_Value_Unit___;

-----------------------------------------------------------------------------
-------------------- CONVERSION METHODS -------------------------------------
-----------------------------------------------------------------------------

FUNCTION To_Boolean_Arr____ (
   arr_ IN Text_Arr ) RETURN Boolean_Arr
IS
   ret_ Boolean_Arr := Boolean_Arr();
BEGIN
   IF (arr_.count > 0) THEN
      FOR i IN arr_.first .. arr_.last LOOP
      ret_.extend;
      ret_(ret_.last) := Fndcg_Projection_Svc_Util_API.To_Boolean(arr_(i));
      END LOOP;
   END IF;
   RETURN ret_;
END To_Boolean_Arr____;

-----------------------------------------------------------------------------
-------------------- TOP ----------------------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Move_Product___ (
   company_id_ IN VARCHAR2,
   source_branch_id_ IN VARCHAR2,
   source_inventory_id_ IN NUMBER,
   product_id_ IN NUMBER,
   dest_branch_id_ IN VARCHAR2,
   dest_inventory_id_ IN NUMBER,
   quantityto_move_ IN NUMBER)
IS
BEGIN
   Trn_Inventory_Prod_Util_API.Move_Items(company_id_, source_branch_id_,source_inventory_id_,product_id_, dest_branch_id_, dest_inventory_id_, quantityto_move_);
END Move_Product___;


FUNCTION Get_Current_Quantity___ (
   para_company_id_ IN VARCHAR2,
   para_branch_id_ IN VARCHAR2,
   para_inventory_id_ IN NUMBER,
   para_product_id_ IN NUMBER) RETURN NUMBER
IS
   --   quantity___ NUMBER;
--BEGIN
--   quantity___ := Trn_Inventory_Product_API.Get_Quantity(para_company_id_,para_branch_id_, para_inventory_id_, para_product_id_ );
--   
--   IF (quantity___ IS NULL) THEN
--      RETURN 0;
--      
--   ELSE
--      RETURN quantity___;
--      
--   END IF;
BEGIN
   RETURN NVL (Trn_Inventory_Product_API.Get_Quantity(para_company_id_,para_branch_id_, para_inventory_id_, para_product_id_ ),0);
END Get_Current_Quantity___;

END Product_Handling_SVC;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

GRANT EXECUTE ON Product_Handling_SVC TO IFSSYS
/

-- [IFS COMPLETE BLOCK BEGINEND]
DECLARE
   projection_ VARCHAR2(250) := 'ProductHandling';
BEGIN
   Fnd_Projection_API.Create_Or_Replace(projection_, description_ => 'Used to handle all Product related activities', categories_ => 'Users', component_ => 'TRNINV', layer_  => 'Cust', plsql_package_ => 'PRODUCT_HANDLING_SVC', api_class_ => '', deprecated_ => 'FALSE');
   Fnd_Proj_Action_API.Create_Or_Replace(projection_, 'MoveProduct');
   Fnd_Proj_Entity_API.Create_Or_Replace(projection_, 'TrnUnit', 'CRUD', 'TRN_UNIT', 'TrnUnit', 'Main', 'FALSE');
   Fnd_Proj_Entity_API.Create_Or_Replace(projection_, 'TrnProduct', 'CRUD', 'TRN_PRODUCT', 'TrnProduct', 'Main', 'FALSE');
   Fnd_Proj_Entity_API.Create_Or_Replace(projection_, 'TrnBrand', 'CRUD', 'TRN_BRAND', 'TrnBrand', 'Main', 'FALSE');
   Fnd_Proj_Entity_API.Create_Or_Replace(projection_, 'TrnProdCategory', 'CRUD', 'TRN_PROD_CATEGORY', 'TrnProdCategory', 'Main', 'FALSE');
   Fnd_Proj_Entity_API.Create_Or_Replace(projection_, 'TrnProdCategoryBrand', 'CRUD', 'TRN_PROD_CATEGORY_BRAND', 'TrnProdCategoryBrand', 'Main', 'FALSE');
   Fnd_Proj_Entity_API.Create_Or_Replace(projection_, 'TrnModel', 'CRUD', 'TRN_MODEL', 'TrnModel', 'Main', 'FALSE');
   Fnd_Proj_Entity_API.Create_Or_Replace(projection_, 'TrnInventoryProduct', 'CRUD', 'TRN_INVENTORY_PRODUCT', 'TrnInventoryProduct', 'Main', 'FALSE');
   Fnd_Proj_Entity_API.Create_Or_Replace(projection_, 'TrnInventory', 'R', 'TRN_INVENTORY', 'TrnInventory', 'Main', 'FALSE');
   Fnd_Proj_Entity_API.Create_Or_Replace(projection_, 'TrnBranch', 'R', 'TRN_BRANCH', 'TrnBranch', 'Main', 'FALSE');
   Fnd_Proj_Entityset_API.Create_Or_Replace(projection_, 'Reference_TrnInventory', 'Entity', 'TrnInventory');
   Fnd_Proj_Entityset_API.Create_Or_Replace(projection_, 'Reference_TrnBranch', 'Entity', 'TrnBranch');
   Fnd_Proj_Entityset_API.Create_Or_Replace(projection_, 'TrnUnitSet', 'Entity', 'TrnUnit');
   Fnd_Proj_Entityset_API.Create_Or_Replace(projection_, 'TrnProductSet', 'Entity', 'TrnProduct');
   Fnd_Proj_Entityset_API.Create_Or_Replace(projection_, 'TrnBrandSet', 'Entity', 'TrnBrand');
   Fnd_Proj_Entityset_API.Create_Or_Replace(projection_, 'TrnProductCategorySet', 'Entity', 'TrnProdCategory');
   Fnd_Proj_Entityset_API.Create_Or_Replace(projection_, 'TrnProductCategoryBrandSet', 'Entity', 'TrnProdCategoryBrand');
   Fnd_Proj_Entityset_API.Create_Or_Replace(projection_, 'TrnModelSet', 'Entity', 'TrnModel');
   Fnd_Proj_Entityset_API.Create_Or_Replace(projection_, 'TrnInventoryProductSet', 'Entity', 'TrnInventoryProduct');
   Fnd_Proj_Large_Attr_Supp_Api.Set_Lob_Max_Size_Modifiable(projection_, false);

   COMMIT;
END;
-- [END IFS COMPLETE BLOCK]
/
