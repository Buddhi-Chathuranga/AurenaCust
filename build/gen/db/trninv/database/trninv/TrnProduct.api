-----------------------------------------------------------------------------
--
--  Logical unit: TrnProduct
--  Type:         Entity
--  Component:    TRNINV
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------

PROMPT Creating Trn_Product_API specification

-- [IFS COMPLETE BLOCK PACKAGE Trn_Product_API]
CREATE OR REPLACE PACKAGE Trn_Product_API IS

module_                   CONSTANT VARCHAR2(6)      := 'TRNINV';
lu_name_                  CONSTANT VARCHAR2(30)     := 'TrnProduct';
lu_type_                  CONSTANT VARCHAR2(30)     := 'Entity';

-----------------------------------------------------------------------------
-------------------- PUBLIC DECLARATIONS ------------------------------------
-----------------------------------------------------------------------------

TYPE Public_Rec IS RECORD
  (company_id                     TRN_PRODUCT_TAB.company_id%TYPE,
   product_id                     TRN_PRODUCT_TAB.product_id%TYPE,
   "rowid"                        rowid,
   rowversion                     TRN_PRODUCT_TAB.rowversion%TYPE,
   rowkey                         TRN_PRODUCT_TAB.rowkey%TYPE,
   price                          TRN_PRODUCT_TAB.price%TYPE,
   unit                           TRN_PRODUCT_TAB.unit%TYPE,
   brand_id                       TRN_PRODUCT_TAB.brand_id%TYPE,
   category_id                    TRN_PRODUCT_TAB.category_id%TYPE,
   model_id                       TRN_PRODUCT_TAB.model_id%TYPE);


-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------
-- Get_Key_By_Rowkey
--   Returns a table record with only keys (other attributes are NULL) based on a rowkey.
--
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
--
-- Exists
--   Same check as Exist, but returns a BOOLEAN value instead of exception.
--
-- Rowkey_Exist
--   Checks whether the rowkey exists
--   If not an exception will be raised.
--
-- Get_Price
--   Fetches the Price attribute for a record.
--
-- Get_Unit
--   Fetches the Unit attribute for a record.
--
-- Get_Brand_Id
--   Fetches the BrandId attribute for a record.
--
-- Get_Category_Id
--   Fetches the CategoryId attribute for a record.
--
-- Get_Model_Id
--   Fetches the ModelId attribute for a record.
--
-- Get_By_Rowkey
--   Fetches a record containing the public attributes by rowkey inparameter.
--
-- Get
--   Fetches a record containing the public attributes.
--
-- Get_Objkey
--   Fetches the objkey attribute for a record.
--
-- Lock__
--   Client-support to lock a specific instance of the logical unit.
--
-- New__
--   Client-support interface to create LU instances.
--   action_ = 'PREPARE'
--   Default values and handle of information to client.
--   The default values are set in procedure Prepare_Insert___.
--   action_ = 'CHECK'
--   Check all attributes before creating new object and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___.
--   action_ = 'DO'
--   Creation of new instances of the logical unit and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___
--   before calling procedure Insert___.
--
-- Modify__
--   Client-support interface to modify attributes for LU instances.
--   action_ = 'CHECK'
--   Check all attributes before modifying an existing object and
--   handle of information to client. The attribute list is unpacked,
--   checked and prepared(defaults) in procedures Unpack___ and Check_Update___.
--   action_ = 'DO'
--   Modification of an existing instance of the logical unit. The
--   procedure unpacks the attributes, checks all values before
--   procedure Update___ is called.
--
-- Remove__
--   Client-support interface to remove LU instances.
--   action_ = 'CHECK'
--   Check whether a specific LU-instance may be removed or not.
--   The procedure fetches the complete record by calling procedure
--   Get_Object_By_Id___. Then the check is made by calling procedure
-----------------------------------------------------------------------------

--@PoReadOnly(Get_Key_By_Rowkey)
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN trn_product_tab%ROWTYPE;

--@PoReadOnly(Exist)
PROCEDURE Exist (
   company_id_ IN VARCHAR2,
   product_id_ IN NUMBER );

--@PoReadOnly(Exists)
FUNCTION Exists (
   company_id_ IN VARCHAR2,
   product_id_ IN NUMBER ) RETURN BOOLEAN;

--@PoReadOnly(Rowkey_Exist)
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 );

--@PoReadOnly(Get_Price)
FUNCTION Get_Price (
   company_id_ IN VARCHAR2,
   product_id_ IN NUMBER ) RETURN NUMBER;

--@PoReadOnly(Get_Unit)
FUNCTION Get_Unit (
   company_id_ IN VARCHAR2,
   product_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Brand_Id)
FUNCTION Get_Brand_Id (
   company_id_ IN VARCHAR2,
   product_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Category_Id)
FUNCTION Get_Category_Id (
   company_id_ IN VARCHAR2,
   product_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Model_Id)
FUNCTION Get_Model_Id (
   company_id_ IN VARCHAR2,
   product_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_By_Rowkey)
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get)
FUNCTION Get (
   company_id_ IN VARCHAR2,
   product_id_ IN NUMBER ) RETURN Public_Rec;

--@PoReadOnly(Get_Objkey)
FUNCTION Get_Objkey (
   company_id_ IN VARCHAR2,
   product_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Lock__)
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 );

PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Framework method that initializes this package.
-----------------------------------------------------------------------------

--@PoReadOnly(Init)
PROCEDURE Init;

END Trn_Product_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR


